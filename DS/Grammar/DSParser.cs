//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NL=3, STRING_START=4, STRING_CONTEXT=5, STRING_ESCAPE=6, 
		STRING_END=7, LPAR=8, RPAR=9, LBRACE=10, RBRACE=11, EXCLAMATION=12, PLUS=13, 
		MINUS=14, STAR=15, SLASH=16, LESS=17, GREATER=18, EQUAL=19, PERCENT=20, 
		EQEQUAL=21, NOTEQUAL=22, LESSEQUAL=23, GREATEREQUAL=24, PLUSEQUAL=25, 
		MINEQUAL=26, STAREQUAL=27, SLASHEQUAL=28, PERCENTEQUAL=29, AND=30, OR=31, 
		COLON=32, COMMA=33, CALL=34, IF=35, ELIF=36, ELSE=37, WHILE=38, JUMP=39, 
		TOUR=40, LABEL=41, BOOL=42, TRUE=43, FALSE=44, NUMBER=45, ID=46, TAG=47, 
		VARIABLE=48, WS=49, LINE_COMMENT=50, BLOCK_COMMENT=51, ERROR_CHAR=52, 
		NEWLINE=53, EMBED_WS=54;
	public const int
		RULE_program = 0, RULE_label_block = 1, RULE_statement = 2, RULE_dialogue_stmt = 3, 
		RULE_menu_stmt = 4, RULE_menu_item = 5, RULE_jump_stmt = 6, RULE_tour_stmt = 7, 
		RULE_call_stmt = 8, RULE_set_stmt = 9, RULE_if_stmt = 10, RULE_expression = 11, 
		RULE_expr_logical_and = 12, RULE_expr_equality = 13, RULE_expr_comparison = 14, 
		RULE_expr_term = 15, RULE_expr_factor = 16, RULE_expr_unary = 17, RULE_expr_primary = 18, 
		RULE_embedded_expr = 19, RULE_embedded_call = 20, RULE_block = 21, RULE_fstring = 22, 
		RULE_string_fragment = 23;
	public static readonly string[] ruleNames = {
		"program", "label_block", "statement", "dialogue_stmt", "menu_stmt", "menu_item", 
		"jump_stmt", "tour_stmt", "call_stmt", "set_stmt", "if_stmt", "expression", 
		"expr_logical_and", "expr_equality", "expr_comparison", "expr_term", "expr_factor", 
		"expr_unary", "expr_primary", "embedded_expr", "embedded_call", "block", 
		"fstring", "string_fragment"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"'!'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'='", "'%'", "'=='", 
		"'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", null, 
		null, "':'", "','", "'call'", "'if'", "'elif'", "'else'", "'while'", null, 
		null, null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NL", "STRING_START", "STRING_CONTEXT", "STRING_ESCAPE", 
		"STRING_END", "LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", 
		"MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", 
		"NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", 
		"SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", 
		"ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", "BOOL", "TRUE", "FALSE", 
		"NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "EMBED_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext[] label_block() {
			return GetRuleContexts<Label_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext label_block(int i) {
			return GetRuleContext<Label_blockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LABEL) {
				{
				{
				State = 48;
				label_block();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_blockContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public Label_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_blockContext label_block() {
		Label_blockContext _localctx = new Label_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_label_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(LABEL);
			State = 57;
			_localctx.label = Match(ID);
			State = 58;
			Match(COLON);
			State = 59;
			Match(NEWLINE);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDENT) {
					{
					{
					State = 60;
					Match(INDENT);
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 66;
				statement();
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEDENT) {
					{
					{
					State = 67;
					Match(DEDENT);
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 353544527937554L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tour_stmtContext tour_stmt() {
			return GetRuleContext<Tour_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_stmtContext set_stmt() {
			return GetRuleContext<Set_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				dialogue_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				menu_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				jump_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				tour_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				call_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				set_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 83;
				if_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		public IToken speaker;
		public FstringContext text;
		public IToken _TAG;
		public IList<IToken> _tags = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(DSParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(DSParser.TAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 86;
				_localctx.speaker = Match(ID);
				}
			}

			State = 89;
			_localctx.text = fstring();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 90;
				_localctx._TAG = Match(TAG);
				_localctx._tags.Add(_localctx._TAG);
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		public Menu_itemContext _menu_item;
		public IList<Menu_itemContext> _options = new List<Menu_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_menu_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 98;
					_localctx._menu_item = menu_item();
					_localctx._options.Add(_localctx._menu_item);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		public FstringContext text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_localctx.text = fstring();
			State = 104;
			Match(COLON);
			State = 105;
			Match(NEWLINE);
			State = 106;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(JUMP);
			State = 109;
			_localctx.label = Match(ID);
			State = 110;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tour_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUR() { return GetToken(DSParser.TOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Tour_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tour_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTour_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tour_stmtContext tour_stmt() {
		Tour_stmtContext _localctx = new Tour_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_tour_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(TOUR);
			State = 113;
			_localctx.label = Match(ID);
			State = 114;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		public IToken func_name;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DSParser.COMMA, i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(CALL);
			State = 117;
			_localctx.func_name = Match(ID);
			State = 118;
			Match(LPAR);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 321057395340560L) != 0)) {
				{
				State = 119;
				_localctx._expression = expression();
				_localctx._args.Add(_localctx._expression);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 120;
					Match(COMMA);
					State = 121;
					_localctx._expression = expression();
					_localctx._args.Add(_localctx._expression);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 129;
			Match(RPAR);
			State = 130;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_stmtContext : ParserRuleContext {
		public IToken eq;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DSParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(DSParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(DSParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(DSParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(DSParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(DSParser.PERCENTEQUAL, 0); }
		public Set_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_stmtContext set_stmt() {
		Set_stmtContext _localctx = new Set_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_set_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(VARIABLE);
			State = 133;
			_localctx.eq = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1040711680L) != 0)) ) {
				_localctx.eq = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 134;
			_localctx.value = expression();
			State = 135;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _conditions = new List<ExpressionContext>();
		public BlockContext _block;
		public IList<BlockContext> _blocks = new List<BlockContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DSParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DSParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(DSParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(DSParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(IF);
			State = 138;
			_localctx._expression = expression();
			_localctx._conditions.Add(_localctx._expression);
			State = 139;
			Match(COLON);
			State = 140;
			Match(NEWLINE);
			State = 141;
			_localctx._block = block();
			_localctx._blocks.Add(_localctx._block);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 142;
				Match(ELIF);
				State = 143;
				_localctx._expression = expression();
				_localctx._conditions.Add(_localctx._expression);
				State = 144;
				Match(COLON);
				State = 145;
				Match(NEWLINE);
				State = 146;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 153;
				Match(ELSE);
				State = 154;
				Match(COLON);
				State = 155;
				Match(NEWLINE);
				State = 156;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext[] expr_logical_and() {
			return GetRuleContexts<Expr_logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext expr_logical_and(int i) {
			return GetRuleContext<Expr_logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			expr_logical_and();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 160;
				Match(OR);
				State = 161;
				expr_logical_and();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext[] expr_equality() {
			return GetRuleContexts<Expr_equalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext expr_equality(int i) {
			return GetRuleContext<Expr_equalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Expr_logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_logical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_logical_andContext expr_logical_and() {
		Expr_logical_andContext _localctx = new Expr_logical_andContext(Context, State);
		EnterRule(_localctx, 24, RULE_expr_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			expr_equality();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 168;
				Match(AND);
				State = 169;
				expr_equality();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_equalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext[] expr_comparison() {
			return GetRuleContexts<Expr_comparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext expr_comparison(int i) {
			return GetRuleContext<Expr_comparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQUAL() { return GetTokens(DSParser.EQEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL(int i) {
			return GetToken(DSParser.EQEQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQUAL() { return GetTokens(DSParser.NOTEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL(int i) {
			return GetToken(DSParser.NOTEQUAL, i);
		}
		public Expr_equalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_equality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_equalityContext expr_equality() {
		Expr_equalityContext _localctx = new Expr_equalityContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			expr_comparison();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQUAL || _la==NOTEQUAL) {
				{
				{
				State = 176;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQUAL || _la==NOTEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 177;
				expr_comparison();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext[] expr_term() {
			return GetRuleContexts<Expr_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext expr_term(int i) {
			return GetRuleContext<Expr_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(DSParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(DSParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(DSParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(DSParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATEREQUAL() { return GetTokens(DSParser.GREATEREQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL(int i) {
			return GetToken(DSParser.GREATEREQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESSEQUAL() { return GetTokens(DSParser.LESSEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL(int i) {
			return GetToken(DSParser.LESSEQUAL, i);
		}
		public Expr_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_comparisonContext expr_comparison() {
		Expr_comparisonContext _localctx = new Expr_comparisonContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			expr_term();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25559040L) != 0)) {
				{
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25559040L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 185;
				expr_term();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext[] expr_factor() {
			return GetRuleContexts<Expr_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext expr_factor(int i) {
			return GetRuleContext<Expr_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public Expr_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_termContext expr_term() {
		Expr_termContext _localctx = new Expr_termContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			expr_factor();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 192;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 193;
				expr_factor();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext[] expr_unary() {
			return GetRuleContexts<Expr_unaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext expr_unary(int i) {
			return GetRuleContext<Expr_unaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(DSParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(DSParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(DSParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(DSParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(DSParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(DSParser.PERCENT, i);
		}
		public Expr_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_factorContext expr_factor() {
		Expr_factorContext _localctx = new Expr_factorContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			expr_unary();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1146880L) != 0)) {
				{
				{
				State = 200;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1146880L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 201;
				expr_unary();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_primaryContext expr_primary() {
			return GetRuleContext<Expr_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(DSParser.EXCLAMATION, 0); }
		public Expr_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_unaryContext expr_unary() {
		Expr_unaryContext _localctx = new Expr_unaryContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				State = 207;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 210;
			expr_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_callContext embedded_call() {
			return GetRuleContext<Embedded_callContext>(0);
		}
		public Expr_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_primaryContext expr_primary() {
		Expr_primaryContext _localctx = new Expr_primaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_primary);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				Match(BOOL);
				}
				break;
			case STRING_START:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				fstring();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 216;
				Match(LPAR);
				State = 217;
				expression();
				State = 218;
				Match(RPAR);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 220;
				embedded_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_callContext embedded_call() {
			return GetRuleContext<Embedded_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DSParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DSParser.RBRACE, 0); }
		public Embedded_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_exprContext embedded_expr() {
		Embedded_exprContext _localctx = new Embedded_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_embedded_expr);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				embedded_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(LBRACE);
				State = 225;
				expression();
				State = 226;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_callContext : ParserRuleContext {
		public IToken func_name;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DSParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DSParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DSParser.COMMA, i);
		}
		public Embedded_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_callContext embedded_call() {
		Embedded_callContext _localctx = new Embedded_callContext(Context, State);
		EnterRule(_localctx, 40, RULE_embedded_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(LBRACE);
			State = 231;
			Match(CALL);
			State = 232;
			_localctx.func_name = Match(ID);
			State = 233;
			Match(LPAR);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 321057395340560L) != 0)) {
				{
				State = 234;
				_localctx._expression = expression();
				_localctx._args.Add(_localctx._expression);
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 235;
					Match(COMMA);
					State = 236;
					_localctx._expression = expression();
					_localctx._args.Add(_localctx._expression);
					}
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 244;
			Match(RPAR);
			State = 245;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 247;
				Match(INDENT);
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INDENT );
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				statement();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 353544527937552L) != 0) );
			State = 258;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 257;
					Match(DEDENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FstringContext : ParserRuleContext {
		public String_fragmentContext _string_fragment;
		public IList<String_fragmentContext> _frag = new List<String_fragmentContext>();
		public Embedded_exprContext _embedded_expr;
		public IList<Embedded_exprContext> _embed = new List<Embedded_exprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_START() { return GetToken(DSParser.STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(DSParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_fragmentContext[] string_fragment() {
			return GetRuleContexts<String_fragmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_fragmentContext string_fragment(int i) {
			return GetRuleContext<String_fragmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_exprContext[] embedded_expr() {
			return GetRuleContexts<Embedded_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_exprContext embedded_expr(int i) {
			return GetRuleContext<Embedded_exprContext>(i);
		}
		public FstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FstringContext fstring() {
		FstringContext _localctx = new FstringContext(Context, State);
		EnterRule(_localctx, 44, RULE_fstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(STRING_START);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1120L) != 0)) {
				{
				State = 265;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_CONTEXT:
				case STRING_ESCAPE:
					{
					State = 263;
					_localctx._string_fragment = string_fragment();
					_localctx._frag.Add(_localctx._string_fragment);
					}
					break;
				case LBRACE:
					{
					State = 264;
					_localctx._embedded_expr = embedded_expr();
					_localctx._embed.Add(_localctx._embedded_expr);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_fragmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONTEXT() { return GetToken(DSParser.STRING_CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ESCAPE() { return GetToken(DSParser.STRING_ESCAPE, 0); }
		public String_fragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_fragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_fragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_fragmentContext string_fragment() {
		String_fragmentContext _localctx = new String_fragmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_string_fragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_CONTEXT || _la==STRING_ESCAPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,54,275,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,5,1,62,8,1,10,1,12,1,65,9,1,1,1,1,1,5,1,69,8,1,10,1,12,1,72,
		9,1,4,1,74,8,1,11,1,12,1,75,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,85,8,2,1,3,
		3,3,88,8,3,1,3,1,3,5,3,92,8,3,10,3,12,3,95,9,3,1,3,1,3,1,4,4,4,100,8,4,
		11,4,12,4,101,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,5,8,123,8,8,10,8,12,8,126,9,8,3,8,128,8,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,5,10,149,8,10,10,10,12,10,152,9,10,1,10,1,10,1,10,1,10,3,10,158,
		8,10,1,11,1,11,1,11,5,11,163,8,11,10,11,12,11,166,9,11,1,12,1,12,1,12,
		5,12,171,8,12,10,12,12,12,174,9,12,1,13,1,13,1,13,5,13,179,8,13,10,13,
		12,13,182,9,13,1,14,1,14,1,14,5,14,187,8,14,10,14,12,14,190,9,14,1,15,
		1,15,1,15,5,15,195,8,15,10,15,12,15,198,9,15,1,16,1,16,1,16,5,16,203,8,
		16,10,16,12,16,206,9,16,1,17,3,17,209,8,17,1,17,1,17,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,222,8,18,1,19,1,19,1,19,1,19,1,19,3,19,
		229,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,238,8,20,10,20,12,20,
		241,9,20,3,20,243,8,20,1,20,1,20,1,20,1,21,4,21,249,8,21,11,21,12,21,250,
		1,21,4,21,254,8,21,11,21,12,21,255,1,21,4,21,259,8,21,11,21,12,21,260,
		1,22,1,22,1,22,5,22,266,8,22,10,22,12,22,269,9,22,1,22,1,22,1,23,1,23,
		1,23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,0,7,2,0,19,19,25,29,1,0,21,22,2,0,17,18,23,24,1,0,13,14,2,0,15,
		16,20,20,1,0,12,14,1,0,5,6,287,0,51,1,0,0,0,2,56,1,0,0,0,4,84,1,0,0,0,
		6,87,1,0,0,0,8,99,1,0,0,0,10,103,1,0,0,0,12,108,1,0,0,0,14,112,1,0,0,0,
		16,116,1,0,0,0,18,132,1,0,0,0,20,137,1,0,0,0,22,159,1,0,0,0,24,167,1,0,
		0,0,26,175,1,0,0,0,28,183,1,0,0,0,30,191,1,0,0,0,32,199,1,0,0,0,34,208,
		1,0,0,0,36,221,1,0,0,0,38,228,1,0,0,0,40,230,1,0,0,0,42,248,1,0,0,0,44,
		262,1,0,0,0,46,272,1,0,0,0,48,50,3,2,1,0,49,48,1,0,0,0,50,53,1,0,0,0,51,
		49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,0,0,1,55,
		1,1,0,0,0,56,57,5,41,0,0,57,58,5,46,0,0,58,59,5,32,0,0,59,73,5,53,0,0,
		60,62,5,1,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,
		64,66,1,0,0,0,65,63,1,0,0,0,66,70,3,4,2,0,67,69,5,2,0,0,68,67,1,0,0,0,
		69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,
		73,63,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,3,1,0,0,0,77,
		85,3,6,3,0,78,85,3,8,4,0,79,85,3,12,6,0,80,85,3,14,7,0,81,85,3,16,8,0,
		82,85,3,18,9,0,83,85,3,20,10,0,84,77,1,0,0,0,84,78,1,0,0,0,84,79,1,0,0,
		0,84,80,1,0,0,0,84,81,1,0,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,5,1,0,0,0,
		86,88,5,46,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,93,3,44,22,
		0,90,92,5,47,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,
		0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,53,0,0,97,7,1,0,0,0,98,100,3,10,
		5,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,9,
		1,0,0,0,103,104,3,44,22,0,104,105,5,32,0,0,105,106,5,53,0,0,106,107,3,
		42,21,0,107,11,1,0,0,0,108,109,5,39,0,0,109,110,5,46,0,0,110,111,5,53,
		0,0,111,13,1,0,0,0,112,113,5,40,0,0,113,114,5,46,0,0,114,115,5,53,0,0,
		115,15,1,0,0,0,116,117,5,34,0,0,117,118,5,46,0,0,118,127,5,8,0,0,119,124,
		3,22,11,0,120,121,5,33,0,0,121,123,3,22,11,0,122,120,1,0,0,0,123,126,1,
		0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,
		127,119,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,5,9,0,0,130,131,
		5,53,0,0,131,17,1,0,0,0,132,133,5,48,0,0,133,134,7,0,0,0,134,135,3,22,
		11,0,135,136,5,53,0,0,136,19,1,0,0,0,137,138,5,35,0,0,138,139,3,22,11,
		0,139,140,5,32,0,0,140,141,5,53,0,0,141,150,3,42,21,0,142,143,5,36,0,0,
		143,144,3,22,11,0,144,145,5,32,0,0,145,146,5,53,0,0,146,147,3,42,21,0,
		147,149,1,0,0,0,148,142,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,
		1,0,0,0,151,157,1,0,0,0,152,150,1,0,0,0,153,154,5,37,0,0,154,155,5,32,
		0,0,155,156,5,53,0,0,156,158,3,42,21,0,157,153,1,0,0,0,157,158,1,0,0,0,
		158,21,1,0,0,0,159,164,3,24,12,0,160,161,5,31,0,0,161,163,3,24,12,0,162,
		160,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,23,1,0,
		0,0,166,164,1,0,0,0,167,172,3,26,13,0,168,169,5,30,0,0,169,171,3,26,13,
		0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,
		25,1,0,0,0,174,172,1,0,0,0,175,180,3,28,14,0,176,177,7,1,0,0,177,179,3,
		28,14,0,178,176,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,
		0,181,27,1,0,0,0,182,180,1,0,0,0,183,188,3,30,15,0,184,185,7,2,0,0,185,
		187,3,30,15,0,186,184,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,
		1,0,0,0,189,29,1,0,0,0,190,188,1,0,0,0,191,196,3,32,16,0,192,193,7,3,0,
		0,193,195,3,32,16,0,194,192,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,
		197,1,0,0,0,197,31,1,0,0,0,198,196,1,0,0,0,199,204,3,34,17,0,200,201,7,
		4,0,0,201,203,3,34,17,0,202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,
		0,204,205,1,0,0,0,205,33,1,0,0,0,206,204,1,0,0,0,207,209,7,5,0,0,208,207,
		1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,3,36,18,0,211,35,1,0,0,
		0,212,222,5,48,0,0,213,222,5,45,0,0,214,222,5,42,0,0,215,222,3,44,22,0,
		216,217,5,8,0,0,217,218,3,22,11,0,218,219,5,9,0,0,219,222,1,0,0,0,220,
		222,3,40,20,0,221,212,1,0,0,0,221,213,1,0,0,0,221,214,1,0,0,0,221,215,
		1,0,0,0,221,216,1,0,0,0,221,220,1,0,0,0,222,37,1,0,0,0,223,229,3,40,20,
		0,224,225,5,10,0,0,225,226,3,22,11,0,226,227,5,11,0,0,227,229,1,0,0,0,
		228,223,1,0,0,0,228,224,1,0,0,0,229,39,1,0,0,0,230,231,5,10,0,0,231,232,
		5,34,0,0,232,233,5,46,0,0,233,242,5,8,0,0,234,239,3,22,11,0,235,236,5,
		33,0,0,236,238,3,22,11,0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,
		0,239,240,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,242,234,1,0,0,0,242,
		243,1,0,0,0,243,244,1,0,0,0,244,245,5,9,0,0,245,246,5,11,0,0,246,41,1,
		0,0,0,247,249,5,1,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,
		250,251,1,0,0,0,251,253,1,0,0,0,252,254,3,4,2,0,253,252,1,0,0,0,254,255,
		1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,259,5,2,0,
		0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
		43,1,0,0,0,262,267,5,4,0,0,263,266,3,46,23,0,264,266,3,38,19,0,265,263,
		1,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,
		0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,5,7,0,0,271,45,1,0,0,0,272,273,
		7,6,0,0,273,47,1,0,0,0,28,51,63,70,75,84,87,93,101,124,127,150,157,164,
		172,180,188,196,204,208,221,228,239,242,250,255,260,265,267
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
