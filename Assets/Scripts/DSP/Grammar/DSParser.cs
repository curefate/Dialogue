//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, CALL=3, PLAY=4, HIDE=5, SHOW=6, WAIT=7, IF=8, ELSE=9, 
		WHILE=10, JUMP=11, LABEL=12, SYNC=13, WITH=14, MENU=15, TRUE=16, FALSE=17, 
		EQ=18, NEQ=19, GT=20, LT=21, GTE=22, LTE=23, PLUS=24, MINUS=25, MUL=26, 
		DIV=27, NOT=28, OR=29, AND=30, ASSIGN=31, DOT=32, COLON=33, LPAREN=34, 
		RPAREN=35, ID=36, TAG=37, VARIABLE=38, NUMBER=39, BOOL=40, NEWLINE=41, 
		LINE_COMMENT=42, BLOCK_COMMENT=43, STRING=44;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_if_stmt = 2, RULE_while_stmt = 3, 
		RULE_jump_stmt = 4, RULE_label_decl = 5, RULE_dialogue_stmt = 6, RULE_call_stmt = 7, 
		RULE_call_command = 8, RULE_call_arg_pos = 9, RULE_call_arg_key = 10, 
		RULE_menu_stmt = 11, RULE_menu_item = 12, RULE_assignment_stmt = 13, RULE_expression = 14, 
		RULE_logical_and = 15, RULE_equality = 16, RULE_comparison = 17, RULE_term = 18, 
		RULE_factor = 19, RULE_unary = 20, RULE_primary = 21, RULE_block = 22, 
		RULE_literal = 23;
	public static readonly string[] ruleNames = {
		"program", "statement", "if_stmt", "while_stmt", "jump_stmt", "label_decl", 
		"dialogue_stmt", "call_stmt", "call_command", "call_arg_pos", "call_arg_key", 
		"menu_stmt", "menu_item", "assignment_stmt", "expression", "logical_and", 
		"equality", "comparison", "term", "factor", "unary", "primary", "block", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'call'", "'play'", "'hide'", "'show'", "'wait'", "'if'", 
		"'else'", "'while'", "'jump'", "'label'", "'sync'", "'with'", "'menu'", 
		"'true'", "'false'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'!'", "'||'", "'&&'", "'='", "'.'", "':'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "CALL", "PLAY", "HIDE", "SHOW", "WAIT", "IF", 
		"ELSE", "WHILE", "JUMP", "LABEL", "SYNC", "WITH", "MENU", "TRUE", "FALSE", 
		"EQ", "NEQ", "GT", "LT", "GTE", "LTE", "PLUS", "MINUS", "MUL", "DIV", 
		"NOT", "OR", "AND", "ASSIGN", "DOT", "COLON", "LPAREN", "RPAREN", "ID", 
		"TAG", "VARIABLE", "NUMBER", "BOOL", "NEWLINE", "LINE_COMMENT", "BLOCK_COMMENT", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17935783476728L) != 0)) {
				{
				{
				State = 48;
				statement();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				if_stmt();
				State = 57;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				while_stmt();
				State = 60;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				jump_stmt();
				State = 63;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				label_decl();
				State = 66;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68;
				dialogue_stmt();
				State = 69;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				call_stmt();
				State = 72;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74;
				menu_stmt();
				State = 75;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 77;
				assignment_stmt();
				State = 78;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			expression();
			State = 84;
			Match(COLON);
			State = 85;
			block();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 86;
				Match(ELSE);
				State = 87;
				Match(COLON);
				State = 88;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(DSParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(WHILE);
			State = 92;
			expression();
			State = 93;
			Match(COLON);
			State = 94;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(JUMP);
			State = 97;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(LABEL);
			State = 100;
			Match(ID);
			State = 101;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DSParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(DSParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(DSParser.TAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 103;
				Match(SYNC);
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 106;
				Match(ID);
				}
			}

			State = 109;
			Match(STRING);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 110;
				Match(WITH);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 111;
					Match(TAG);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==TAG );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_commandContext call_command() {
			return GetRuleContext<Call_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext[] call_arg_pos() {
			return GetRuleContexts<Call_arg_posContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext call_arg_pos(int i) {
			return GetRuleContext<Call_arg_posContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext[] call_arg_key() {
			return GetRuleContexts<Call_arg_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext call_arg_key(int i) {
			return GetRuleContext<Call_arg_keyContext>(i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 118;
				Match(SYNC);
				}
			}

			State = 121;
			call_command();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19516331393024L) != 0)) {
				{
				{
				State = 122;
				call_arg_pos();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 128;
				call_arg_key();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_commandContext : ParserRuleContext {
		public Call_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_command; } }
	 
		public Call_commandContext() { }
		public virtual void CopyFrom(Call_commandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WaitCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(DSParser.WAIT, 0); }
		public WaitCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallCustomCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public CallCustomCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCustomCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlayCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(DSParser.PLAY, 0); }
		public PlayCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HideCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(DSParser.HIDE, 0); }
		public HideCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHideCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(DSParser.SHOW, 0); }
		public ShowCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_commandContext call_command() {
		Call_commandContext _localctx = new Call_commandContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_command);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				_localctx = new CallCustomCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(CALL);
				State = 135;
				Match(ID);
				}
				break;
			case PLAY:
				_localctx = new PlayCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(PLAY);
				}
				break;
			case HIDE:
				_localctx = new HideCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				Match(HIDE);
				}
				break;
			case SHOW:
				_localctx = new ShowCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 138;
				Match(SHOW);
				}
				break;
			case WAIT:
				_localctx = new WaitCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 139;
				Match(WAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_posContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public Call_arg_posContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_pos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_pos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_posContext call_arg_pos() {
		Call_arg_posContext _localctx = new Call_arg_posContext(Context, State);
		EnterRule(_localctx, 18, RULE_call_arg_pos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case BOOL:
			case STRING:
				{
				State = 142;
				literal();
				}
				break;
			case VARIABLE:
				{
				State = 143;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public Call_arg_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_keyContext call_arg_key() {
		Call_arg_keyContext _localctx = new Call_arg_keyContext(Context, State);
		EnterRule(_localctx, 20, RULE_call_arg_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(ID);
			State = 147;
			Match(EQ);
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 148;
				expression();
				}
				break;
			case 2:
				{
				State = 149;
				literal();
				}
				break;
			case 3:
				{
				State = 150;
				Match(VARIABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(DSParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_menu_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(MENU);
			State = 154;
			Match(COLON);
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 155;
				dialogue_stmt();
				}
				break;
			}
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 158;
				menu_item();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 24, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(STRING);
			State = 164;
			Match(COLON);
			State = 165;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_stmtContext assignment_stmt() {
		Assignment_stmtContext _localctx = new Assignment_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(VARIABLE);
			State = 168;
			Match(EQ);
			State = 169;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext[] logical_and() {
			return GetRuleContexts<Logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and(int i) {
			return GetRuleContext<Logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			logical_and();
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 172;
				Match(OR);
				State = 173;
				logical_and();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_andContext logical_and() {
		Logical_andContext _localctx = new Logical_andContext(Context, State);
		EnterRule(_localctx, 30, RULE_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			equality();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 180;
				Match(AND);
				State = 181;
				equality();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(DSParser.NEQ, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 32, RULE_equality);
		int _la;
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				comparison();
				State = 188;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 189;
				comparison();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				comparison();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(DSParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(DSParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(DSParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(DSParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(DSParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(DSParser.GTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(DSParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(DSParser.LTE, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 34, RULE_comparison);
		int _la;
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				term();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) {
					{
					{
					State = 195;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 196;
					term();
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 36, RULE_term);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				factor();
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS || _la==MINUS) {
					{
					{
					State = 206;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 207;
					factor();
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(DSParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(DSParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(DSParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(DSParser.DIV, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 38, RULE_factor);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				unary();
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MUL || _la==DIV) {
					{
					{
					State = 217;
					_la = TokenStream.LA(1);
					if ( !(_la==MUL || _la==DIV) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 218;
					unary();
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				unary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(DSParser.NOT, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 318767104L) != 0)) {
				{
				State = 227;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 318767104L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 230;
			primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DSParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DSParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235;
				Match(STRING);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236;
				Match(LPAREN);
				State = 237;
				expression();
				State = 238;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(DSParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(DSParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(INDENT);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 243;
					statement();
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 17935783476728L) != 0) );
				State = 248;
				Match(DEDENT);
				}
				break;
			case CALL:
			case PLAY:
			case HIDE:
			case SHOW:
			case WAIT:
			case IF:
			case WHILE:
			case JUMP:
			case LABEL:
			case SYNC:
			case MENU:
			case ID:
			case VARIABLE:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 19241453486080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,256,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,81,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,90,8,2,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,3,6,105,8,6,1,6,3,6,108,
		8,6,1,6,1,6,1,6,4,6,113,8,6,11,6,12,6,114,3,6,117,8,6,1,7,3,7,120,8,7,
		1,7,1,7,5,7,124,8,7,10,7,12,7,127,9,7,1,7,5,7,130,8,7,10,7,12,7,133,9,
		7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,141,8,8,1,9,1,9,3,9,145,8,9,1,10,1,10,1,
		10,1,10,1,10,3,10,152,8,10,1,11,1,11,1,11,3,11,157,8,11,1,11,4,11,160,
		8,11,11,11,12,11,161,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,5,14,175,8,14,10,14,12,14,178,9,14,1,15,1,15,1,15,5,15,183,8,15,10,
		15,12,15,186,9,15,1,16,1,16,1,16,1,16,1,16,3,16,193,8,16,1,17,1,17,1,17,
		5,17,198,8,17,10,17,12,17,201,9,17,1,17,3,17,204,8,17,1,18,1,18,1,18,5,
		18,209,8,18,10,18,12,18,212,9,18,1,18,3,18,215,8,18,1,19,1,19,1,19,5,19,
		220,8,19,10,19,12,19,223,9,19,1,19,3,19,226,8,19,1,20,3,20,229,8,20,1,
		20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,241,8,21,1,22,1,22,
		4,22,245,8,22,11,22,12,22,246,1,22,1,22,1,22,3,22,252,8,22,1,23,1,23,1,
		23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,0,7,1,1,41,41,1,0,18,19,1,0,20,23,1,0,24,25,1,0,26,27,2,0,24,25,
		28,28,2,0,39,40,44,44,272,0,51,1,0,0,0,2,80,1,0,0,0,4,82,1,0,0,0,6,91,
		1,0,0,0,8,96,1,0,0,0,10,99,1,0,0,0,12,104,1,0,0,0,14,119,1,0,0,0,16,140,
		1,0,0,0,18,144,1,0,0,0,20,146,1,0,0,0,22,153,1,0,0,0,24,163,1,0,0,0,26,
		167,1,0,0,0,28,171,1,0,0,0,30,179,1,0,0,0,32,192,1,0,0,0,34,203,1,0,0,
		0,36,214,1,0,0,0,38,225,1,0,0,0,40,228,1,0,0,0,42,240,1,0,0,0,44,251,1,
		0,0,0,46,253,1,0,0,0,48,50,3,2,1,0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,
		0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,0,0,1,55,1,1,0,
		0,0,56,57,3,4,2,0,57,58,7,0,0,0,58,81,1,0,0,0,59,60,3,6,3,0,60,61,7,0,
		0,0,61,81,1,0,0,0,62,63,3,8,4,0,63,64,7,0,0,0,64,81,1,0,0,0,65,66,3,10,
		5,0,66,67,7,0,0,0,67,81,1,0,0,0,68,69,3,12,6,0,69,70,7,0,0,0,70,81,1,0,
		0,0,71,72,3,14,7,0,72,73,7,0,0,0,73,81,1,0,0,0,74,75,3,22,11,0,75,76,7,
		0,0,0,76,81,1,0,0,0,77,78,3,26,13,0,78,79,7,0,0,0,79,81,1,0,0,0,80,56,
		1,0,0,0,80,59,1,0,0,0,80,62,1,0,0,0,80,65,1,0,0,0,80,68,1,0,0,0,80,71,
		1,0,0,0,80,74,1,0,0,0,80,77,1,0,0,0,81,3,1,0,0,0,82,83,5,8,0,0,83,84,3,
		28,14,0,84,85,5,33,0,0,85,89,3,44,22,0,86,87,5,9,0,0,87,88,5,33,0,0,88,
		90,3,44,22,0,89,86,1,0,0,0,89,90,1,0,0,0,90,5,1,0,0,0,91,92,5,10,0,0,92,
		93,3,28,14,0,93,94,5,33,0,0,94,95,3,44,22,0,95,7,1,0,0,0,96,97,5,11,0,
		0,97,98,5,36,0,0,98,9,1,0,0,0,99,100,5,12,0,0,100,101,5,36,0,0,101,102,
		5,33,0,0,102,11,1,0,0,0,103,105,5,13,0,0,104,103,1,0,0,0,104,105,1,0,0,
		0,105,107,1,0,0,0,106,108,5,36,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,
		109,1,0,0,0,109,116,5,44,0,0,110,112,5,14,0,0,111,113,5,37,0,0,112,111,
		1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,
		0,116,110,1,0,0,0,116,117,1,0,0,0,117,13,1,0,0,0,118,120,5,13,0,0,119,
		118,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,125,3,16,8,0,122,124,3,
		18,9,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,
		126,131,1,0,0,0,127,125,1,0,0,0,128,130,3,20,10,0,129,128,1,0,0,0,130,
		133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,15,1,0,0,0,133,131,1,0,
		0,0,134,135,5,3,0,0,135,141,5,36,0,0,136,141,5,4,0,0,137,141,5,5,0,0,138,
		141,5,6,0,0,139,141,5,7,0,0,140,134,1,0,0,0,140,136,1,0,0,0,140,137,1,
		0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,17,1,0,0,0,142,145,3,46,23,0,
		143,145,5,38,0,0,144,142,1,0,0,0,144,143,1,0,0,0,145,19,1,0,0,0,146,147,
		5,36,0,0,147,151,5,18,0,0,148,152,3,28,14,0,149,152,3,46,23,0,150,152,
		5,38,0,0,151,148,1,0,0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,21,1,0,0,
		0,153,154,5,15,0,0,154,156,5,33,0,0,155,157,3,12,6,0,156,155,1,0,0,0,156,
		157,1,0,0,0,157,159,1,0,0,0,158,160,3,24,12,0,159,158,1,0,0,0,160,161,
		1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,23,1,0,0,0,163,164,5,44,0,
		0,164,165,5,33,0,0,165,166,3,44,22,0,166,25,1,0,0,0,167,168,5,38,0,0,168,
		169,5,18,0,0,169,170,3,28,14,0,170,27,1,0,0,0,171,176,3,30,15,0,172,173,
		5,29,0,0,173,175,3,30,15,0,174,172,1,0,0,0,175,178,1,0,0,0,176,174,1,0,
		0,0,176,177,1,0,0,0,177,29,1,0,0,0,178,176,1,0,0,0,179,184,3,32,16,0,180,
		181,5,30,0,0,181,183,3,32,16,0,182,180,1,0,0,0,183,186,1,0,0,0,184,182,
		1,0,0,0,184,185,1,0,0,0,185,31,1,0,0,0,186,184,1,0,0,0,187,188,3,34,17,
		0,188,189,7,1,0,0,189,190,3,34,17,0,190,193,1,0,0,0,191,193,3,34,17,0,
		192,187,1,0,0,0,192,191,1,0,0,0,193,33,1,0,0,0,194,199,3,36,18,0,195,196,
		7,2,0,0,196,198,3,36,18,0,197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,
		0,0,199,200,1,0,0,0,200,204,1,0,0,0,201,199,1,0,0,0,202,204,3,36,18,0,
		203,194,1,0,0,0,203,202,1,0,0,0,204,35,1,0,0,0,205,210,3,38,19,0,206,207,
		7,3,0,0,207,209,3,38,19,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,
		0,0,210,211,1,0,0,0,211,215,1,0,0,0,212,210,1,0,0,0,213,215,3,38,19,0,
		214,205,1,0,0,0,214,213,1,0,0,0,215,37,1,0,0,0,216,221,3,40,20,0,217,218,
		7,4,0,0,218,220,3,40,20,0,219,217,1,0,0,0,220,223,1,0,0,0,221,219,1,0,
		0,0,221,222,1,0,0,0,222,226,1,0,0,0,223,221,1,0,0,0,224,226,3,40,20,0,
		225,216,1,0,0,0,225,224,1,0,0,0,226,39,1,0,0,0,227,229,7,5,0,0,228,227,
		1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,3,42,21,0,231,41,1,0,0,
		0,232,241,5,38,0,0,233,241,5,39,0,0,234,241,5,40,0,0,235,241,5,44,0,0,
		236,237,5,34,0,0,237,238,3,28,14,0,238,239,5,35,0,0,239,241,1,0,0,0,240,
		232,1,0,0,0,240,233,1,0,0,0,240,234,1,0,0,0,240,235,1,0,0,0,240,236,1,
		0,0,0,241,43,1,0,0,0,242,244,5,1,0,0,243,245,3,2,1,0,244,243,1,0,0,0,245,
		246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,
		2,0,0,249,252,1,0,0,0,250,252,3,2,1,0,251,242,1,0,0,0,251,250,1,0,0,0,
		252,45,1,0,0,0,253,254,7,6,0,0,254,47,1,0,0,0,28,51,80,89,104,107,114,
		116,119,125,131,140,144,151,156,161,176,184,192,199,203,210,214,221,225,
		228,240,246,251
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
