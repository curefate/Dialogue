//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, EXCLAMATION=7, PLUS=8, 
		MINUS=9, STAR=10, SLASH=11, LESS=12, GREATER=13, EQUAL=14, PERCENT=15, 
		EQEQUAL=16, NOTEQUAL=17, LESSEQUAL=18, GREATEREQUAL=19, PLUSEQUAL=20, 
		MINEQUAL=21, STAREQUAL=22, SLASHEQUAL=23, PERCENTEQUAL=24, AND=25, OR=26, 
		COLON=27, CALL=28, PLAY=29, HIDE=30, SHOW=31, WAIT=32, IF=33, ELSE=34, 
		WHILE=35, JUMP=36, LABEL=37, SYNC=38, MENU=39, BOOL=40, TRUE=41, FALSE=42, 
		NUMBER=43, ID=44, TAG=45, VARIABLE=46, WS=47, LINE_COMMENT=48, BLOCK_COMMENT=49, 
		ERROR_CHAR=50, NEWLINE=51, STRING_START=52;
	public const int
		RULE_program = 0, RULE_label_decl = 1, RULE_statement = 2, RULE_dialogue_stmt = 3, 
		RULE_menu_stmt = 4, RULE_menu_item = 5, RULE_jump_stmt = 6, RULE_call_stmt = 7, 
		RULE_call_command = 8, RULE_call_arg_pos = 9, RULE_call_arg_key = 10, 
		RULE_set_stmt = 11, RULE_if_stmt = 12, RULE_expression = 13, RULE_expr_logical_and = 14, 
		RULE_expr_equality = 15, RULE_expr_comparison = 16, RULE_expr_term = 17, 
		RULE_expr_factor = 18, RULE_expr_unary = 19, RULE_expr_primary = 20, RULE_block = 21;
	public static readonly string[] ruleNames = {
		"program", "label_decl", "statement", "dialogue_stmt", "menu_stmt", "menu_item", 
		"jump_stmt", "call_stmt", "call_command", "call_arg_pos", "call_arg_key", 
		"set_stmt", "if_stmt", "expression", "expr_logical_and", "expr_equality", 
		"expr_comparison", "expr_term", "expr_factor", "expr_unary", "expr_primary", 
		"block"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'!'", "'+'", "'-'", "'*'", 
		"'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", "'>='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", null, null, "':'", "'call'", "'play'", 
		"'hide'", "'show'", "'wait'", "'if'", "'else'", "'while'", "'jump'", "'label'", 
		"'sync'", "'menu'", null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "EXCLAMATION", 
		"PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "CALL", 
		"PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", "WHILE", "JUMP", "LABEL", 
		"SYNC", "MENU", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext[] label_decl() {
			return GetRuleContexts<Label_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl(int i) {
			return GetRuleContext<Label_declContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 89008633806856L) != 0)) {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case CALL:
				case PLAY:
				case HIDE:
				case SHOW:
				case WAIT:
				case IF:
				case JUMP:
				case SYNC:
				case MENU:
				case ID:
				case VARIABLE:
					{
					State = 44;
					statement();
					}
					break;
				case LABEL:
					{
					State = 45;
					label_decl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 2, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(LABEL);
			State = 54;
			_localctx.label = Match(ID);
			State = 55;
			Match(COLON);
			State = 56;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_stmtContext set_stmt() {
			return GetRuleContext<Set_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				dialogue_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				menu_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				jump_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61;
				call_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62;
				set_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63;
				if_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		public IToken speaker;
		public IToken text;
		public IToken _TAG;
		public IList<IToken> _tags = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(DSParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(DSParser.TAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 66;
				Match(SYNC);
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 69;
				_localctx.speaker = Match(ID);
				}
			}

			State = 72;
			_localctx.text = Match(STRING);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 73;
				_localctx._TAG = Match(TAG);
				_localctx._tags.Add(_localctx._TAG);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		public Dialogue_stmtContext intro;
		public Menu_itemContext _menu_item;
		public IList<Menu_itemContext> _option = new List<Menu_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(DSParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(DSParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(DSParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_menu_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(MENU);
			State = 82;
			Match(COLON);
			State = 83;
			Match(NEWLINE);
			State = 84;
			Match(INDENT);
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 85;
				_localctx.intro = dialogue_stmt();
				}
				break;
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				_localctx._menu_item = menu_item();
				_localctx._option.Add(_localctx._menu_item);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 93;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_localctx.text = Match(STRING);
			State = 96;
			Match(COLON);
			State = 97;
			Match(NEWLINE);
			State = 98;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(JUMP);
			State = 101;
			_localctx.label = Match(ID);
			State = 102;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		public Call_arg_posContext _call_arg_pos;
		public IList<Call_arg_posContext> _args_p = new List<Call_arg_posContext>();
		public Call_arg_keyContext _call_arg_key;
		public IList<Call_arg_keyContext> _args_k = new List<Call_arg_keyContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Call_commandContext call_command() {
			return GetRuleContext<Call_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext[] call_arg_pos() {
			return GetRuleContexts<Call_arg_posContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext call_arg_pos(int i) {
			return GetRuleContext<Call_arg_posContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext[] call_arg_key() {
			return GetRuleContexts<Call_arg_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext call_arg_key(int i) {
			return GetRuleContext<Call_arg_keyContext>(i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 104;
				Match(SYNC);
				}
			}

			State = 107;
			call_command();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 80264348827656L) != 0)) {
				{
				{
				State = 108;
				_localctx._call_arg_pos = call_arg_pos();
				_localctx._args_p.Add(_localctx._call_arg_pos);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 114;
				_localctx._call_arg_key = call_arg_key();
				_localctx._args_k.Add(_localctx._call_arg_key);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_commandContext : ParserRuleContext {
		public IToken func;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(DSParser.PLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(DSParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(DSParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(DSParser.WAIT, 0); }
		public Call_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_commandContext call_command() {
		Call_commandContext _localctx = new Call_commandContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_command);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(CALL);
				State = 123;
				_localctx.func = Match(ID);
				}
				break;
			case PLAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(PLAY);
				}
				break;
			case HIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				Match(HIDE);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126;
				Match(SHOW);
				}
				break;
			case WAIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127;
				Match(WAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_posContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public Call_arg_posContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_pos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_pos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_posContext call_arg_pos() {
		Call_arg_posContext _localctx = new Call_arg_posContext(Context, State);
		EnterRule(_localctx, 18, RULE_call_arg_pos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 80264348827656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DSParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public Call_arg_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_keyContext call_arg_key() {
		Call_arg_keyContext _localctx = new Call_arg_keyContext(Context, State);
		EnterRule(_localctx, 20, RULE_call_arg_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(ID);
			State = 133;
			Match(EQUAL);
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 134;
				expression();
				}
				break;
			case 2:
				{
				State = 135;
				Match(STRING);
				}
				break;
			case 3:
				{
				State = 136;
				Match(BOOL);
				}
				break;
			case 4:
				{
				State = 137;
				Match(NUMBER);
				}
				break;
			case 5:
				{
				State = 138;
				Match(VARIABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_stmtContext : ParserRuleContext {
		public IToken eq;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DSParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(DSParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(DSParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(DSParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(DSParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(DSParser.PERCENTEQUAL, 0); }
		public Set_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_stmtContext set_stmt() {
		Set_stmtContext _localctx = new Set_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_set_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(VARIABLE);
			State = 142;
			_localctx.eq = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32522240L) != 0)) ) {
				_localctx.eq = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 143;
			expression();
			State = 144;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public BlockContext if_block;
		public BlockContext else_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DSParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DSParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(IF);
			State = 147;
			expression();
			State = 148;
			Match(COLON);
			State = 149;
			Match(NEWLINE);
			State = 150;
			_localctx.if_block = block();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 151;
				Match(ELSE);
				State = 152;
				Match(COLON);
				State = 153;
				Match(NEWLINE);
				State = 154;
				_localctx.else_block = block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext[] expr_logical_and() {
			return GetRuleContexts<Expr_logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext expr_logical_and(int i) {
			return GetRuleContext<Expr_logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			expr_logical_and();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 158;
				Match(OR);
				State = 159;
				expr_logical_and();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext[] expr_equality() {
			return GetRuleContexts<Expr_equalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext expr_equality(int i) {
			return GetRuleContext<Expr_equalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Expr_logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_logical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_logical_andContext expr_logical_and() {
		Expr_logical_andContext _localctx = new Expr_logical_andContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			expr_equality();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 166;
				Match(AND);
				State = 167;
				expr_equality();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_equalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext[] expr_comparison() {
			return GetRuleContexts<Expr_comparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext expr_comparison(int i) {
			return GetRuleContext<Expr_comparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQUAL() { return GetTokens(DSParser.EQEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL(int i) {
			return GetToken(DSParser.EQEQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQUAL() { return GetTokens(DSParser.NOTEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL(int i) {
			return GetToken(DSParser.NOTEQUAL, i);
		}
		public Expr_equalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_equality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_equalityContext expr_equality() {
		Expr_equalityContext _localctx = new Expr_equalityContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			expr_comparison();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQUAL || _la==NOTEQUAL) {
				{
				{
				State = 174;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQUAL || _la==NOTEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 175;
				expr_comparison();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext[] expr_term() {
			return GetRuleContexts<Expr_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext expr_term(int i) {
			return GetRuleContext<Expr_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(DSParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(DSParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(DSParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(DSParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATEREQUAL() { return GetTokens(DSParser.GREATEREQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL(int i) {
			return GetToken(DSParser.GREATEREQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESSEQUAL() { return GetTokens(DSParser.LESSEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL(int i) {
			return GetToken(DSParser.LESSEQUAL, i);
		}
		public Expr_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_comparisonContext expr_comparison() {
		Expr_comparisonContext _localctx = new Expr_comparisonContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			expr_term();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 798720L) != 0)) {
				{
				{
				State = 182;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 798720L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 183;
				expr_term();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext[] expr_factor() {
			return GetRuleContexts<Expr_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext expr_factor(int i) {
			return GetRuleContext<Expr_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public Expr_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_termContext expr_term() {
		Expr_termContext _localctx = new Expr_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			expr_factor();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 190;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 191;
				expr_factor();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext[] expr_unary() {
			return GetRuleContexts<Expr_unaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext expr_unary(int i) {
			return GetRuleContext<Expr_unaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(DSParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(DSParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(DSParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(DSParser.SLASH, i);
		}
		public Expr_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_factorContext expr_factor() {
		Expr_factorContext _localctx = new Expr_factorContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			expr_unary();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STAR || _la==SLASH) {
				{
				{
				State = 198;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 199;
				expr_unary();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_primaryContext expr_primary() {
			return GetRuleContext<Expr_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(DSParser.EXCLAMATION, 0); }
		public Expr_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_unaryContext expr_unary() {
		Expr_unaryContext _localctx = new Expr_unaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 896L) != 0)) {
				{
				State = 205;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 896L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 208;
			expr_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		public Expr_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_primaryContext expr_primary() {
		Expr_primaryContext _localctx = new Expr_primaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_expr_primary);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				Match(STRING);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				Match(LPAR);
				State = 215;
				expression();
				State = 216;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(DSParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(DSParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(INDENT);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 221;
				statement();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 88871194853384L) != 0) );
			State = 226;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,52,229,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,5,0,47,8,0,10,0,12,0,50,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,65,8,2,1,3,3,3,68,8,3,1,3,3,3,71,8,3,1,3,1,3,5,3,
		75,8,3,10,3,12,3,78,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,87,8,4,1,4,4,4,
		90,8,4,11,4,12,4,91,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,3,
		7,106,8,7,1,7,1,7,5,7,110,8,7,10,7,12,7,113,9,7,1,7,5,7,116,8,7,10,7,12,
		7,119,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,129,8,8,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,3,10,140,8,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,156,8,12,1,13,1,13,1,13,5,13,
		161,8,13,10,13,12,13,164,9,13,1,14,1,14,1,14,5,14,169,8,14,10,14,12,14,
		172,9,14,1,15,1,15,1,15,5,15,177,8,15,10,15,12,15,180,9,15,1,16,1,16,1,
		16,5,16,185,8,16,10,16,12,16,188,9,16,1,17,1,17,1,17,5,17,193,8,17,10,
		17,12,17,196,9,17,1,18,1,18,1,18,5,18,201,8,18,10,18,12,18,204,9,18,1,
		19,3,19,207,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
		219,8,20,1,21,1,21,4,21,223,8,21,11,21,12,21,224,1,21,1,21,1,21,0,0,22,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,7,4,0,3,
		3,40,40,43,43,46,46,2,0,14,14,20,24,1,0,16,17,2,0,12,13,18,19,1,0,8,9,
		1,0,10,11,1,0,7,9,242,0,48,1,0,0,0,2,53,1,0,0,0,4,64,1,0,0,0,6,67,1,0,
		0,0,8,81,1,0,0,0,10,95,1,0,0,0,12,100,1,0,0,0,14,105,1,0,0,0,16,128,1,
		0,0,0,18,130,1,0,0,0,20,132,1,0,0,0,22,141,1,0,0,0,24,146,1,0,0,0,26,157,
		1,0,0,0,28,165,1,0,0,0,30,173,1,0,0,0,32,181,1,0,0,0,34,189,1,0,0,0,36,
		197,1,0,0,0,38,206,1,0,0,0,40,218,1,0,0,0,42,220,1,0,0,0,44,47,3,4,2,0,
		45,47,3,2,1,0,46,44,1,0,0,0,46,45,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,
		48,49,1,0,0,0,49,51,1,0,0,0,50,48,1,0,0,0,51,52,5,0,0,1,52,1,1,0,0,0,53,
		54,5,37,0,0,54,55,5,44,0,0,55,56,5,27,0,0,56,57,5,51,0,0,57,3,1,0,0,0,
		58,65,3,6,3,0,59,65,3,8,4,0,60,65,3,12,6,0,61,65,3,14,7,0,62,65,3,22,11,
		0,63,65,3,24,12,0,64,58,1,0,0,0,64,59,1,0,0,0,64,60,1,0,0,0,64,61,1,0,
		0,0,64,62,1,0,0,0,64,63,1,0,0,0,65,5,1,0,0,0,66,68,5,38,0,0,67,66,1,0,
		0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,71,5,44,0,0,70,69,1,0,0,0,70,71,1,0,
		0,0,71,72,1,0,0,0,72,76,5,3,0,0,73,75,5,45,0,0,74,73,1,0,0,0,75,78,1,0,
		0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,51,
		0,0,80,7,1,0,0,0,81,82,5,39,0,0,82,83,5,27,0,0,83,84,5,51,0,0,84,86,5,
		1,0,0,85,87,3,6,3,0,86,85,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,90,3,
		10,5,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,93,1,
		0,0,0,93,94,5,2,0,0,94,9,1,0,0,0,95,96,5,3,0,0,96,97,5,27,0,0,97,98,5,
		51,0,0,98,99,3,42,21,0,99,11,1,0,0,0,100,101,5,36,0,0,101,102,5,44,0,0,
		102,103,5,51,0,0,103,13,1,0,0,0,104,106,5,38,0,0,105,104,1,0,0,0,105,106,
		1,0,0,0,106,107,1,0,0,0,107,111,3,16,8,0,108,110,3,18,9,0,109,108,1,0,
		0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,117,1,0,0,0,113,
		111,1,0,0,0,114,116,3,20,10,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,
		1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,51,0,
		0,121,15,1,0,0,0,122,123,5,28,0,0,123,129,5,44,0,0,124,129,5,29,0,0,125,
		129,5,30,0,0,126,129,5,31,0,0,127,129,5,32,0,0,128,122,1,0,0,0,128,124,
		1,0,0,0,128,125,1,0,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,17,1,0,0,0,
		130,131,7,0,0,0,131,19,1,0,0,0,132,133,5,44,0,0,133,139,5,14,0,0,134,140,
		3,26,13,0,135,140,5,3,0,0,136,140,5,40,0,0,137,140,5,43,0,0,138,140,5,
		46,0,0,139,134,1,0,0,0,139,135,1,0,0,0,139,136,1,0,0,0,139,137,1,0,0,0,
		139,138,1,0,0,0,140,21,1,0,0,0,141,142,5,46,0,0,142,143,7,1,0,0,143,144,
		3,26,13,0,144,145,5,51,0,0,145,23,1,0,0,0,146,147,5,33,0,0,147,148,3,26,
		13,0,148,149,5,27,0,0,149,150,5,51,0,0,150,155,3,42,21,0,151,152,5,34,
		0,0,152,153,5,27,0,0,153,154,5,51,0,0,154,156,3,42,21,0,155,151,1,0,0,
		0,155,156,1,0,0,0,156,25,1,0,0,0,157,162,3,28,14,0,158,159,5,26,0,0,159,
		161,3,28,14,0,160,158,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,
		1,0,0,0,163,27,1,0,0,0,164,162,1,0,0,0,165,170,3,30,15,0,166,167,5,25,
		0,0,167,169,3,30,15,0,168,166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,
		170,171,1,0,0,0,171,29,1,0,0,0,172,170,1,0,0,0,173,178,3,32,16,0,174,175,
		7,2,0,0,175,177,3,32,16,0,176,174,1,0,0,0,177,180,1,0,0,0,178,176,1,0,
		0,0,178,179,1,0,0,0,179,31,1,0,0,0,180,178,1,0,0,0,181,186,3,34,17,0,182,
		183,7,3,0,0,183,185,3,34,17,0,184,182,1,0,0,0,185,188,1,0,0,0,186,184,
		1,0,0,0,186,187,1,0,0,0,187,33,1,0,0,0,188,186,1,0,0,0,189,194,3,36,18,
		0,190,191,7,4,0,0,191,193,3,36,18,0,192,190,1,0,0,0,193,196,1,0,0,0,194,
		192,1,0,0,0,194,195,1,0,0,0,195,35,1,0,0,0,196,194,1,0,0,0,197,202,3,38,
		19,0,198,199,7,5,0,0,199,201,3,38,19,0,200,198,1,0,0,0,201,204,1,0,0,0,
		202,200,1,0,0,0,202,203,1,0,0,0,203,37,1,0,0,0,204,202,1,0,0,0,205,207,
		7,6,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,3,40,20,
		0,209,39,1,0,0,0,210,219,5,46,0,0,211,219,5,43,0,0,212,219,5,40,0,0,213,
		219,5,3,0,0,214,215,5,5,0,0,215,216,3,26,13,0,216,217,5,6,0,0,217,219,
		1,0,0,0,218,210,1,0,0,0,218,211,1,0,0,0,218,212,1,0,0,0,218,213,1,0,0,
		0,218,214,1,0,0,0,219,41,1,0,0,0,220,222,5,1,0,0,221,223,3,4,2,0,222,221,
		1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,
		0,226,227,5,2,0,0,227,43,1,0,0,0,23,46,48,64,67,70,76,86,91,105,111,117,
		128,139,155,162,170,178,186,194,202,206,218,224
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
