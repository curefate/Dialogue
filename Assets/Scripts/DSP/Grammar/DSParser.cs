//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, EXCLAMATION=7, PLUS=8, 
		MINUS=9, STAR=10, SLASH=11, LESS=12, GREATER=13, EQUAL=14, PERCENT=15, 
		EQEQUAL=16, NOTEQUAL=17, LESSEQUAL=18, GREATEREQUAL=19, PLUSEQUAL=20, 
		MINEQUAL=21, STAREQUAL=22, SLASHEQUAL=23, PERCENTEQUAL=24, AND=25, OR=26, 
		COLON=27, COMMA=28, CALL=29, IF=30, ELIF=31, ELSE=32, WHILE=33, JUMP=34, 
		TOUR=35, LABEL=36, SYNC=37, BOOL=38, TRUE=39, FALSE=40, NUMBER=41, ID=42, 
		TAG=43, VARIABLE=44, WS=45, LINE_COMMENT=46, BLOCK_COMMENT=47, ERROR_CHAR=48, 
		NEWLINE=49, STRING_START=50;
	public const int
		RULE_program = 0, RULE_label_block = 1, RULE_statement = 2, RULE_dialogue_stmt = 3, 
		RULE_menu_stmt = 4, RULE_menu_item = 5, RULE_jump_stmt = 6, RULE_tour_stmt = 7, 
		RULE_call_stmt = 8, RULE_set_stmt = 9, RULE_if_stmt = 10, RULE_condition = 11, 
		RULE_argument = 12, RULE_expression = 13, RULE_expr_logical_and = 14, 
		RULE_expr_equality = 15, RULE_expr_comparison = 16, RULE_expr_term = 17, 
		RULE_expr_factor = 18, RULE_expr_unary = 19, RULE_expr_primary = 20, RULE_block = 21;
	public static readonly string[] ruleNames = {
		"program", "label_block", "statement", "dialogue_stmt", "menu_stmt", "menu_item", 
		"jump_stmt", "tour_stmt", "call_stmt", "set_stmt", "if_stmt", "condition", 
		"argument", "expression", "expr_logical_and", "expr_equality", "expr_comparison", 
		"expr_term", "expr_factor", "expr_unary", "expr_primary", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'!'", "'+'", "'-'", "'*'", 
		"'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", "'>='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", null, null, "':'", "','", "'call'", "'if'", 
		"'elif'", "'else'", "'while'", null, null, null, "'sync'", null, "'true'", 
		"'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "EXCLAMATION", 
		"PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", 
		"CALL", "IF", "ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", "SYNC", 
		"BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext[] label_block() {
			return GetRuleContexts<Label_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext label_block(int i) {
			return GetRuleContext<Label_blockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LABEL) {
				{
				{
				State = 44;
				label_block();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_blockContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public Label_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_blockContext label_block() {
		Label_blockContext _localctx = new Label_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_label_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(LABEL);
			State = 53;
			_localctx.label = Match(ID);
			State = 54;
			Match(COLON);
			State = 55;
			Match(NEWLINE);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INDENT) {
				{
				{
				State = 56;
				Match(INDENT);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62;
				statement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 22180821729288L) != 0) );
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEDENT) {
				{
				{
				State = 67;
				Match(DEDENT);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tour_stmtContext tour_stmt() {
			return GetRuleContext<Tour_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_stmtContext set_stmt() {
			return GetRuleContext<Set_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				dialogue_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				menu_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				jump_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76;
				tour_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77;
				call_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78;
				set_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 79;
				if_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		public IToken speaker;
		public IToken text;
		public IToken _TAG;
		public IList<IToken> _tags = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(DSParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(DSParser.TAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 82;
				Match(SYNC);
				}
			}

			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 85;
				_localctx.speaker = Match(ID);
				}
			}

			State = 88;
			_localctx.text = Match(STRING);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 89;
				_localctx._TAG = Match(TAG);
				_localctx._tags.Add(_localctx._TAG);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		public Menu_itemContext _menu_item;
		public IList<Menu_itemContext> _options = new List<Menu_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_menu_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 97;
					_localctx._menu_item = menu_item();
					_localctx._options.Add(_localctx._menu_item);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_localctx.text = Match(STRING);
			State = 103;
			Match(COLON);
			State = 104;
			Match(NEWLINE);
			State = 105;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(JUMP);
			State = 108;
			_localctx.label = Match(ID);
			State = 109;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tour_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUR() { return GetToken(DSParser.TOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Tour_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tour_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTour_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tour_stmtContext tour_stmt() {
		Tour_stmtContext _localctx = new Tour_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_tour_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(TOUR);
			State = 112;
			_localctx.label = Match(ID);
			State = 113;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		public IToken func_name;
		public ArgumentContext _argument;
		public IList<ArgumentContext> _args = new List<ArgumentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DSParser.COMMA, i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(CALL);
			State = 116;
			_localctx.func_name = Match(ID);
			State = 117;
			Match(LPAR);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 20066087207848L) != 0)) {
				{
				State = 118;
				_localctx._argument = argument();
				_localctx._args.Add(_localctx._argument);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 119;
					Match(COMMA);
					State = 120;
					_localctx._argument = argument();
					_localctx._args.Add(_localctx._argument);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 128;
			Match(RPAR);
			State = 129;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_stmtContext : ParserRuleContext {
		public IToken eq;
		public ArgumentContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DSParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(DSParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(DSParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(DSParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(DSParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(DSParser.PERCENTEQUAL, 0); }
		public Set_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_stmtContext set_stmt() {
		Set_stmtContext _localctx = new Set_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_set_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(VARIABLE);
			State = 132;
			_localctx.eq = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32522240L) != 0)) ) {
				_localctx.eq = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 133;
			_localctx.value = argument();
			State = 134;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ConditionContext _condition;
		public IList<ConditionContext> _conditions = new List<ConditionContext>();
		public BlockContext _block;
		public IList<BlockContext> _blocks = new List<BlockContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DSParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DSParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(DSParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(DSParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(IF);
			State = 137;
			_localctx._condition = condition();
			_localctx._conditions.Add(_localctx._condition);
			State = 138;
			Match(COLON);
			State = 139;
			Match(NEWLINE);
			State = 140;
			_localctx._block = block();
			_localctx._blocks.Add(_localctx._block);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 141;
				Match(ELIF);
				State = 142;
				_localctx._condition = condition();
				_localctx._conditions.Add(_localctx._condition);
				State = 143;
				Match(COLON);
				State = 144;
				Match(NEWLINE);
				State = 145;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 152;
				Match(ELSE);
				State = 153;
				Match(COLON);
				State = 154;
				Match(NEWLINE);
				State = 155;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(BOOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				Match(VARIABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(BOOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				Match(NUMBER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				Match(VARIABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext[] expr_logical_and() {
			return GetRuleContexts<Expr_logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext expr_logical_and(int i) {
			return GetRuleContext<Expr_logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			expr_logical_and();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 171;
				Match(OR);
				State = 172;
				expr_logical_and();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext[] expr_equality() {
			return GetRuleContexts<Expr_equalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext expr_equality(int i) {
			return GetRuleContext<Expr_equalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Expr_logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_logical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_logical_andContext expr_logical_and() {
		Expr_logical_andContext _localctx = new Expr_logical_andContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			expr_equality();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 179;
				Match(AND);
				State = 180;
				expr_equality();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_equalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext[] expr_comparison() {
			return GetRuleContexts<Expr_comparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext expr_comparison(int i) {
			return GetRuleContext<Expr_comparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQUAL() { return GetTokens(DSParser.EQEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL(int i) {
			return GetToken(DSParser.EQEQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQUAL() { return GetTokens(DSParser.NOTEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL(int i) {
			return GetToken(DSParser.NOTEQUAL, i);
		}
		public Expr_equalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_equality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_equalityContext expr_equality() {
		Expr_equalityContext _localctx = new Expr_equalityContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			expr_comparison();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQUAL || _la==NOTEQUAL) {
				{
				{
				State = 187;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQUAL || _la==NOTEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 188;
				expr_comparison();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext[] expr_term() {
			return GetRuleContexts<Expr_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext expr_term(int i) {
			return GetRuleContext<Expr_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(DSParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(DSParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(DSParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(DSParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATEREQUAL() { return GetTokens(DSParser.GREATEREQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL(int i) {
			return GetToken(DSParser.GREATEREQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESSEQUAL() { return GetTokens(DSParser.LESSEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL(int i) {
			return GetToken(DSParser.LESSEQUAL, i);
		}
		public Expr_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_comparisonContext expr_comparison() {
		Expr_comparisonContext _localctx = new Expr_comparisonContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			expr_term();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 798720L) != 0)) {
				{
				{
				State = 195;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 798720L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 196;
				expr_term();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext[] expr_factor() {
			return GetRuleContexts<Expr_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext expr_factor(int i) {
			return GetRuleContext<Expr_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public Expr_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_termContext expr_term() {
		Expr_termContext _localctx = new Expr_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			expr_factor();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 203;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 204;
				expr_factor();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext[] expr_unary() {
			return GetRuleContexts<Expr_unaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext expr_unary(int i) {
			return GetRuleContext<Expr_unaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(DSParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(DSParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(DSParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(DSParser.SLASH, i);
		}
		public Expr_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_factorContext expr_factor() {
		Expr_factorContext _localctx = new Expr_factorContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			expr_unary();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STAR || _la==SLASH) {
				{
				{
				State = 211;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 212;
				expr_unary();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_primaryContext expr_primary() {
			return GetRuleContext<Expr_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(DSParser.EXCLAMATION, 0); }
		public Expr_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_unaryContext expr_unary() {
		Expr_unaryContext _localctx = new Expr_unaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 896L) != 0)) {
				{
				State = 218;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 896L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 221;
			expr_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		public Expr_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_primaryContext expr_primary() {
		Expr_primaryContext _localctx = new Expr_primaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_expr_primary);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226;
				Match(STRING);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				Match(LPAR);
				State = 228;
				expression();
				State = 229;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 233;
				Match(INDENT);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INDENT );
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 238;
				statement();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 22180821729288L) != 0) );
			State = 244;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 243;
					Match(DEDENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,50,249,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,58,8,1,
		10,1,12,1,61,9,1,1,1,4,1,64,8,1,11,1,12,1,65,1,1,5,1,69,8,1,10,1,12,1,
		72,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,81,8,2,1,3,3,3,84,8,3,1,3,3,3,87,
		8,3,1,3,1,3,5,3,91,8,3,10,3,12,3,94,9,3,1,3,1,3,1,4,4,4,99,8,4,11,4,12,
		4,100,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
		1,8,1,8,1,8,5,8,122,8,8,10,8,12,8,125,9,8,3,8,127,8,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		5,10,148,8,10,10,10,12,10,151,9,10,1,10,1,10,1,10,1,10,3,10,157,8,10,1,
		11,1,11,1,11,3,11,162,8,11,1,12,1,12,1,12,1,12,1,12,3,12,169,8,12,1,13,
		1,13,1,13,5,13,174,8,13,10,13,12,13,177,9,13,1,14,1,14,1,14,5,14,182,8,
		14,10,14,12,14,185,9,14,1,15,1,15,1,15,5,15,190,8,15,10,15,12,15,193,9,
		15,1,16,1,16,1,16,5,16,198,8,16,10,16,12,16,201,9,16,1,17,1,17,1,17,5,
		17,206,8,17,10,17,12,17,209,9,17,1,18,1,18,1,18,5,18,214,8,18,10,18,12,
		18,217,9,18,1,19,3,19,220,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,232,8,20,1,21,4,21,235,8,21,11,21,12,21,236,1,21,4,21,240,
		8,21,11,21,12,21,241,1,21,4,21,245,8,21,11,21,12,21,246,1,21,0,0,22,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,6,2,0,14,
		14,20,24,1,0,16,17,2,0,12,13,18,19,1,0,8,9,1,0,10,11,1,0,7,9,264,0,47,
		1,0,0,0,2,52,1,0,0,0,4,80,1,0,0,0,6,83,1,0,0,0,8,98,1,0,0,0,10,102,1,0,
		0,0,12,107,1,0,0,0,14,111,1,0,0,0,16,115,1,0,0,0,18,131,1,0,0,0,20,136,
		1,0,0,0,22,161,1,0,0,0,24,168,1,0,0,0,26,170,1,0,0,0,28,178,1,0,0,0,30,
		186,1,0,0,0,32,194,1,0,0,0,34,202,1,0,0,0,36,210,1,0,0,0,38,219,1,0,0,
		0,40,231,1,0,0,0,42,234,1,0,0,0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,
		0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,0,
		0,1,51,1,1,0,0,0,52,53,5,36,0,0,53,54,5,42,0,0,54,55,5,27,0,0,55,59,5,
		49,0,0,56,58,5,1,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,
		0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,62,64,3,4,2,0,63,62,1,0,0,0,64,65,1,
		0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,70,1,0,0,0,67,69,5,2,0,0,68,67,1,
		0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,3,1,0,0,0,72,70,1,0,
		0,0,73,81,3,6,3,0,74,81,3,8,4,0,75,81,3,12,6,0,76,81,3,14,7,0,77,81,3,
		16,8,0,78,81,3,18,9,0,79,81,3,20,10,0,80,73,1,0,0,0,80,74,1,0,0,0,80,75,
		1,0,0,0,80,76,1,0,0,0,80,77,1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,5,1,
		0,0,0,82,84,5,37,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,87,5,
		42,0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,92,5,3,0,0,89,91,5,
		43,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,
		0,0,0,94,92,1,0,0,0,95,96,5,49,0,0,96,7,1,0,0,0,97,99,3,10,5,0,98,97,1,
		0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,9,1,0,0,0,102,
		103,5,3,0,0,103,104,5,27,0,0,104,105,5,49,0,0,105,106,3,42,21,0,106,11,
		1,0,0,0,107,108,5,34,0,0,108,109,5,42,0,0,109,110,5,49,0,0,110,13,1,0,
		0,0,111,112,5,35,0,0,112,113,5,42,0,0,113,114,5,49,0,0,114,15,1,0,0,0,
		115,116,5,29,0,0,116,117,5,42,0,0,117,126,5,5,0,0,118,123,3,24,12,0,119,
		120,5,28,0,0,120,122,3,24,12,0,121,119,1,0,0,0,122,125,1,0,0,0,123,121,
		1,0,0,0,123,124,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,126,118,1,0,0,
		0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,6,0,0,129,130,5,49,0,0,130,
		17,1,0,0,0,131,132,5,44,0,0,132,133,7,0,0,0,133,134,3,24,12,0,134,135,
		5,49,0,0,135,19,1,0,0,0,136,137,5,30,0,0,137,138,3,22,11,0,138,139,5,27,
		0,0,139,140,5,49,0,0,140,149,3,42,21,0,141,142,5,31,0,0,142,143,3,22,11,
		0,143,144,5,27,0,0,144,145,5,49,0,0,145,146,3,42,21,0,146,148,1,0,0,0,
		147,141,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,156,
		1,0,0,0,151,149,1,0,0,0,152,153,5,32,0,0,153,154,5,27,0,0,154,155,5,49,
		0,0,155,157,3,42,21,0,156,152,1,0,0,0,156,157,1,0,0,0,157,21,1,0,0,0,158,
		162,3,26,13,0,159,162,5,38,0,0,160,162,5,44,0,0,161,158,1,0,0,0,161,159,
		1,0,0,0,161,160,1,0,0,0,162,23,1,0,0,0,163,169,3,26,13,0,164,169,5,3,0,
		0,165,169,5,38,0,0,166,169,5,41,0,0,167,169,5,44,0,0,168,163,1,0,0,0,168,
		164,1,0,0,0,168,165,1,0,0,0,168,166,1,0,0,0,168,167,1,0,0,0,169,25,1,0,
		0,0,170,175,3,28,14,0,171,172,5,26,0,0,172,174,3,28,14,0,173,171,1,0,0,
		0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,27,1,0,0,0,177,175,
		1,0,0,0,178,183,3,30,15,0,179,180,5,25,0,0,180,182,3,30,15,0,181,179,1,
		0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,29,1,0,0,0,185,
		183,1,0,0,0,186,191,3,32,16,0,187,188,7,1,0,0,188,190,3,32,16,0,189,187,
		1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,31,1,0,0,0,
		193,191,1,0,0,0,194,199,3,34,17,0,195,196,7,2,0,0,196,198,3,34,17,0,197,
		195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,33,1,0,
		0,0,201,199,1,0,0,0,202,207,3,36,18,0,203,204,7,3,0,0,204,206,3,36,18,
		0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,
		35,1,0,0,0,209,207,1,0,0,0,210,215,3,38,19,0,211,212,7,4,0,0,212,214,3,
		38,19,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,
		0,216,37,1,0,0,0,217,215,1,0,0,0,218,220,7,5,0,0,219,218,1,0,0,0,219,220,
		1,0,0,0,220,221,1,0,0,0,221,222,3,40,20,0,222,39,1,0,0,0,223,232,5,44,
		0,0,224,232,5,41,0,0,225,232,5,38,0,0,226,232,5,3,0,0,227,228,5,5,0,0,
		228,229,3,26,13,0,229,230,5,6,0,0,230,232,1,0,0,0,231,223,1,0,0,0,231,
		224,1,0,0,0,231,225,1,0,0,0,231,226,1,0,0,0,231,227,1,0,0,0,232,41,1,0,
		0,0,233,235,5,1,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,
		237,1,0,0,0,237,239,1,0,0,0,238,240,3,4,2,0,239,238,1,0,0,0,240,241,1,
		0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,245,5,2,0,0,
		244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,43,
		1,0,0,0,26,47,59,65,70,80,83,86,92,100,123,126,149,156,161,168,175,183,
		191,199,207,215,219,231,236,241,246
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
