//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, CALL=4, PLAY=5, HIDE=6, SHOW=7, WAIT=8, 
		IF=9, ELSE=10, WHILE=11, JUMP=12, LABEL=13, SYNC=14, WITH=15, MENU=16, 
		TRUE=17, FALSE=18, EQ=19, NEQ=20, GT=21, LT=22, GTE=23, LTE=24, PLUS=25, 
		MINUS=26, MUL=27, DIV=28, NOT=29, OR=30, AND=31, ASSIGN=32, DOT=33, COLON=34, 
		LPAREN=35, RPAREN=36, ID=37, FRAG=38, VARIABLE=39, NUMBER=40, BOOL=41, 
		NEWLINE=42, LINE_COMMENT=43, BLOCK_COMMENT=44, STRING_START=45;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_if_stmt = 2, RULE_while_stmt = 3, 
		RULE_jump_stmt = 4, RULE_label_decl = 5, RULE_dialogue_stmt = 6, RULE_call_stmt = 7, 
		RULE_call_command = 8, RULE_call_arg_pos = 9, RULE_call_arg_key = 10, 
		RULE_menu_stmt = 11, RULE_menu_item = 12, RULE_assignment_stmt = 13, RULE_expression = 14, 
		RULE_logical_and = 15, RULE_equality = 16, RULE_comparison = 17, RULE_term = 18, 
		RULE_factor = 19, RULE_unary = 20, RULE_primary = 21, RULE_block = 22, 
		RULE_literal = 23;
	public static readonly string[] ruleNames = {
		"program", "statement", "if_stmt", "while_stmt", "jump_stmt", "label_decl", 
		"dialogue_stmt", "call_stmt", "call_command", "call_arg_pos", "call_arg_key", 
		"menu_stmt", "menu_item", "assignment_stmt", "expression", "logical_and", 
		"equality", "comparison", "term", "factor", "unary", "primary", "block", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'call'", "'play'", "'hide'", "'show'", "'wait'", 
		"'if'", "'else'", "'while'", "'jump'", "'label'", "'sync'", "'with'", 
		"'menu'", "'true'", "'false'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'+'", "'-'", "'*'", "'/'", "'!'", "'||'", "'&&'", "'='", "'.'", "':'", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "CALL", "PLAY", "HIDE", "SHOW", "WAIT", 
		"IF", "ELSE", "WHILE", "JUMP", "LABEL", "SYNC", "WITH", "MENU", "TRUE", 
		"FALSE", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "PLUS", "MINUS", "MUL", 
		"DIV", "NOT", "OR", "AND", "ASSIGN", "DOT", "COLON", "LPAREN", "RPAREN", 
		"ID", "FRAG", "VARIABLE", "NUMBER", "BOOL", "NEWLINE", "LINE_COMMENT", 
		"BLOCK_COMMENT", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 687194864632L) != 0)) {
				{
				{
				State = 48;
				statement();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				if_stmt();
				State = 57;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				while_stmt();
				State = 60;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				jump_stmt();
				State = 63;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				label_decl();
				State = 66;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68;
				dialogue_stmt();
				State = 69;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				call_stmt();
				State = 72;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74;
				menu_stmt();
				State = 75;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 77;
				assignment_stmt();
				State = 78;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			expression();
			State = 84;
			Match(COLON);
			State = 85;
			block();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 86;
				Match(ELSE);
				State = 87;
				Match(COLON);
				State = 88;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(DSParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(WHILE);
			State = 92;
			expression();
			State = 93;
			Match(COLON);
			State = 94;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(JUMP);
			State = 97;
			_localctx.label = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(LABEL);
			State = 100;
			_localctx.label = Match(ID);
			State = 101;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		public IToken speaker;
		public IToken text;
		public IToken tags;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(DSParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FRAG() { return GetTokens(DSParser.FRAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAG(int i) {
			return GetToken(DSParser.FRAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 103;
				Match(SYNC);
				}
			}

			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 106;
				_localctx.speaker = Match(ID);
				State = 107;
				_localctx.text = Match(STRING);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 108;
					Match(WITH);
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 109;
						_localctx.tags = Match(FRAG);
						}
						}
						State = 112;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==FRAG );
					}
				}

				}
				break;
			case STRING:
				{
				State = 116;
				_localctx.text = Match(STRING);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 117;
					Match(WITH);
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 118;
						_localctx.tags = Match(FRAG);
						}
						}
						State = 121;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==FRAG );
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_commandContext call_command() {
			return GetRuleContext<Call_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext[] call_arg_pos() {
			return GetRuleContexts<Call_arg_posContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_posContext call_arg_pos(int i) {
			return GetRuleContext<Call_arg_posContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext[] call_arg_key() {
			return GetRuleContexts<Call_arg_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_arg_keyContext call_arg_key(int i) {
			return GetRuleContext<Call_arg_keyContext>(i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_call_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 127;
				Match(SYNC);
				}
			}

			State = 130;
			call_command();
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 131;
					call_arg_pos();
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 137;
				call_arg_key();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_commandContext : ParserRuleContext {
		public Call_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_command; } }
	 
		public Call_commandContext() { }
		public virtual void CopyFrom(Call_commandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WaitCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(DSParser.WAIT, 0); }
		public WaitCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallCustomCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public CallCustomCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCustomCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlayCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(DSParser.PLAY, 0); }
		public PlayCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HideCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(DSParser.HIDE, 0); }
		public HideCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHideCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCommandContext : Call_commandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(DSParser.SHOW, 0); }
		public ShowCommandContext(Call_commandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_commandContext call_command() {
		Call_commandContext _localctx = new Call_commandContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_command);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				_localctx = new CallCustomCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				Match(CALL);
				State = 144;
				Match(ID);
				}
				break;
			case PLAY:
				_localctx = new PlayCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(PLAY);
				}
				break;
			case HIDE:
				_localctx = new HideCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				Match(HIDE);
				}
				break;
			case SHOW:
				_localctx = new ShowCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 147;
				Match(SHOW);
				}
				break;
			case WAIT:
				_localctx = new WaitCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 148;
				Match(WAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_posContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Call_arg_posContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_pos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_pos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_posContext call_arg_pos() {
		Call_arg_posContext _localctx = new Call_arg_posContext(Context, State);
		EnterRule(_localctx, 18, RULE_call_arg_pos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case BOOL:
				{
				State = 151;
				literal();
				}
				break;
			case VARIABLE:
				{
				State = 152;
				Match(VARIABLE);
				}
				break;
			case ID:
				{
				State = 153;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_arg_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		public Call_arg_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_arg_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_arg_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_arg_keyContext call_arg_key() {
		Call_arg_keyContext _localctx = new Call_arg_keyContext(Context, State);
		EnterRule(_localctx, 20, RULE_call_arg_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(ID);
			State = 157;
			Match(EQ);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 158;
				expression();
				}
				break;
			case 2:
				{
				State = 159;
				literal();
				}
				break;
			case 3:
				{
				State = 160;
				Match(VARIABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		public Dialogue_stmtContext intro;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(DSParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_menu_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(MENU);
			State = 164;
			Match(COLON);
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 165;
				_localctx.intro = dialogue_stmt();
				}
				break;
			}
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 168;
				menu_item();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 24, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(STRING);
			State = 174;
			Match(COLON);
			State = 175;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_stmtContext assignment_stmt() {
		Assignment_stmtContext _localctx = new Assignment_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(VARIABLE);
			State = 178;
			Match(EQ);
			State = 179;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext[] logical_and() {
			return GetRuleContexts<Logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and(int i) {
			return GetRuleContext<Logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			logical_and();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 182;
				Match(OR);
				State = 183;
				logical_and();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_andContext logical_and() {
		Logical_andContext _localctx = new Logical_andContext(Context, State);
		EnterRule(_localctx, 30, RULE_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			equality();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 190;
				Match(AND);
				State = 191;
				equality();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(DSParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(DSParser.NEQ, 0); }
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 32, RULE_equality);
		int _la;
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				comparison();
				State = 198;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 199;
				comparison();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				comparison();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(DSParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(DSParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(DSParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(DSParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(DSParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(DSParser.GTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(DSParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(DSParser.LTE, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 34, RULE_comparison);
		int _la;
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				term();
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) {
					{
					{
					State = 205;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 206;
					term();
					}
					}
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 36, RULE_term);
		int _la;
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				factor();
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS || _la==MINUS) {
					{
					{
					State = 216;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 217;
					factor();
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(DSParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(DSParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(DSParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(DSParser.DIV, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 38, RULE_factor);
		int _la;
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				unary();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MUL || _la==DIV) {
					{
					{
					State = 227;
					_la = TokenStream.LA(1);
					if ( !(_la==MUL || _la==DIV) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 228;
					unary();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				unary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(DSParser.NOT, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 637534208L) != 0)) {
				{
				State = 237;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 637534208L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 240;
			primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DSParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DSParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 245;
				Match(STRING);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 246;
				Match(LPAREN);
				State = 247;
				expression();
				State = 248;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(DSParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(DSParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				Match(INDENT);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 253;
					statement();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 687194864632L) != 0) );
				State = 258;
				Match(DEDENT);
				}
				break;
			case STRING:
			case CALL:
			case PLAY:
			case HIDE:
			case SHOW:
			case WAIT:
			case IF:
			case WHILE:
			case JUMP:
			case LABEL:
			case SYNC:
			case MENU:
			case ID:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DSParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298534883336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,266,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,81,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,90,8,2,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,3,6,105,8,6,1,6,1,6,1,
		6,1,6,4,6,111,8,6,11,6,12,6,112,3,6,115,8,6,1,6,1,6,1,6,4,6,120,8,6,11,
		6,12,6,121,3,6,124,8,6,3,6,126,8,6,1,7,3,7,129,8,7,1,7,1,7,5,7,133,8,7,
		10,7,12,7,136,9,7,1,7,5,7,139,8,7,10,7,12,7,142,9,7,1,8,1,8,1,8,1,8,1,
		8,1,8,3,8,150,8,8,1,9,1,9,1,9,3,9,155,8,9,1,10,1,10,1,10,1,10,1,10,3,10,
		162,8,10,1,11,1,11,1,11,3,11,167,8,11,1,11,4,11,170,8,11,11,11,12,11,171,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,185,8,14,10,
		14,12,14,188,9,14,1,15,1,15,1,15,5,15,193,8,15,10,15,12,15,196,9,15,1,
		16,1,16,1,16,1,16,1,16,3,16,203,8,16,1,17,1,17,1,17,5,17,208,8,17,10,17,
		12,17,211,9,17,1,17,3,17,214,8,17,1,18,1,18,1,18,5,18,219,8,18,10,18,12,
		18,222,9,18,1,18,3,18,225,8,18,1,19,1,19,1,19,5,19,230,8,19,10,19,12,19,
		233,9,19,1,19,3,19,236,8,19,1,20,3,20,239,8,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,251,8,21,1,22,1,22,4,22,255,8,22,11,22,12,
		22,256,1,22,1,22,1,22,3,22,262,8,22,1,23,1,23,1,23,0,0,24,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,7,1,1,42,42,1,
		0,19,20,1,0,21,24,1,0,25,26,1,0,27,28,2,0,25,26,29,29,2,0,3,3,40,41,285,
		0,51,1,0,0,0,2,80,1,0,0,0,4,82,1,0,0,0,6,91,1,0,0,0,8,96,1,0,0,0,10,99,
		1,0,0,0,12,104,1,0,0,0,14,128,1,0,0,0,16,149,1,0,0,0,18,154,1,0,0,0,20,
		156,1,0,0,0,22,163,1,0,0,0,24,173,1,0,0,0,26,177,1,0,0,0,28,181,1,0,0,
		0,30,189,1,0,0,0,32,202,1,0,0,0,34,213,1,0,0,0,36,224,1,0,0,0,38,235,1,
		0,0,0,40,238,1,0,0,0,42,250,1,0,0,0,44,261,1,0,0,0,46,263,1,0,0,0,48,50,
		3,2,1,0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,
		1,0,0,0,53,51,1,0,0,0,54,55,5,0,0,1,55,1,1,0,0,0,56,57,3,4,2,0,57,58,7,
		0,0,0,58,81,1,0,0,0,59,60,3,6,3,0,60,61,7,0,0,0,61,81,1,0,0,0,62,63,3,
		8,4,0,63,64,7,0,0,0,64,81,1,0,0,0,65,66,3,10,5,0,66,67,7,0,0,0,67,81,1,
		0,0,0,68,69,3,12,6,0,69,70,7,0,0,0,70,81,1,0,0,0,71,72,3,14,7,0,72,73,
		7,0,0,0,73,81,1,0,0,0,74,75,3,22,11,0,75,76,7,0,0,0,76,81,1,0,0,0,77,78,
		3,26,13,0,78,79,7,0,0,0,79,81,1,0,0,0,80,56,1,0,0,0,80,59,1,0,0,0,80,62,
		1,0,0,0,80,65,1,0,0,0,80,68,1,0,0,0,80,71,1,0,0,0,80,74,1,0,0,0,80,77,
		1,0,0,0,81,3,1,0,0,0,82,83,5,9,0,0,83,84,3,28,14,0,84,85,5,34,0,0,85,89,
		3,44,22,0,86,87,5,10,0,0,87,88,5,34,0,0,88,90,3,44,22,0,89,86,1,0,0,0,
		89,90,1,0,0,0,90,5,1,0,0,0,91,92,5,11,0,0,92,93,3,28,14,0,93,94,5,34,0,
		0,94,95,3,44,22,0,95,7,1,0,0,0,96,97,5,12,0,0,97,98,5,37,0,0,98,9,1,0,
		0,0,99,100,5,13,0,0,100,101,5,37,0,0,101,102,5,34,0,0,102,11,1,0,0,0,103,
		105,5,14,0,0,104,103,1,0,0,0,104,105,1,0,0,0,105,125,1,0,0,0,106,107,5,
		37,0,0,107,114,5,3,0,0,108,110,5,15,0,0,109,111,5,38,0,0,110,109,1,0,0,
		0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,
		108,1,0,0,0,114,115,1,0,0,0,115,126,1,0,0,0,116,123,5,3,0,0,117,119,5,
		15,0,0,118,120,5,38,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,
		0,121,122,1,0,0,0,122,124,1,0,0,0,123,117,1,0,0,0,123,124,1,0,0,0,124,
		126,1,0,0,0,125,106,1,0,0,0,125,116,1,0,0,0,126,13,1,0,0,0,127,129,5,14,
		0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,134,3,16,8,0,131,
		133,3,18,9,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,
		0,0,0,135,140,1,0,0,0,136,134,1,0,0,0,137,139,3,20,10,0,138,137,1,0,0,
		0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,15,1,0,0,0,142,140,
		1,0,0,0,143,144,5,4,0,0,144,150,5,37,0,0,145,150,5,5,0,0,146,150,5,6,0,
		0,147,150,5,7,0,0,148,150,5,8,0,0,149,143,1,0,0,0,149,145,1,0,0,0,149,
		146,1,0,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,17,1,0,0,0,151,155,3,46,
		23,0,152,155,5,39,0,0,153,155,5,37,0,0,154,151,1,0,0,0,154,152,1,0,0,0,
		154,153,1,0,0,0,155,19,1,0,0,0,156,157,5,37,0,0,157,161,5,19,0,0,158,162,
		3,28,14,0,159,162,3,46,23,0,160,162,5,39,0,0,161,158,1,0,0,0,161,159,1,
		0,0,0,161,160,1,0,0,0,162,21,1,0,0,0,163,164,5,16,0,0,164,166,5,34,0,0,
		165,167,3,12,6,0,166,165,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,170,
		3,24,12,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
		0,0,172,23,1,0,0,0,173,174,5,3,0,0,174,175,5,34,0,0,175,176,3,44,22,0,
		176,25,1,0,0,0,177,178,5,39,0,0,178,179,5,19,0,0,179,180,3,28,14,0,180,
		27,1,0,0,0,181,186,3,30,15,0,182,183,5,30,0,0,183,185,3,30,15,0,184,182,
		1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,29,1,0,0,0,
		188,186,1,0,0,0,189,194,3,32,16,0,190,191,5,31,0,0,191,193,3,32,16,0,192,
		190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,31,1,0,
		0,0,196,194,1,0,0,0,197,198,3,34,17,0,198,199,7,1,0,0,199,200,3,34,17,
		0,200,203,1,0,0,0,201,203,3,34,17,0,202,197,1,0,0,0,202,201,1,0,0,0,203,
		33,1,0,0,0,204,209,3,36,18,0,205,206,7,2,0,0,206,208,3,36,18,0,207,205,
		1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,214,1,0,0,
		0,211,209,1,0,0,0,212,214,3,36,18,0,213,204,1,0,0,0,213,212,1,0,0,0,214,
		35,1,0,0,0,215,220,3,38,19,0,216,217,7,3,0,0,217,219,3,38,19,0,218,216,
		1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,225,1,0,0,
		0,222,220,1,0,0,0,223,225,3,38,19,0,224,215,1,0,0,0,224,223,1,0,0,0,225,
		37,1,0,0,0,226,231,3,40,20,0,227,228,7,4,0,0,228,230,3,40,20,0,229,227,
		1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,236,1,0,0,
		0,233,231,1,0,0,0,234,236,3,40,20,0,235,226,1,0,0,0,235,234,1,0,0,0,236,
		39,1,0,0,0,237,239,7,5,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,
		0,0,240,241,3,42,21,0,241,41,1,0,0,0,242,251,5,39,0,0,243,251,5,40,0,0,
		244,251,5,41,0,0,245,251,5,3,0,0,246,247,5,35,0,0,247,248,3,28,14,0,248,
		249,5,36,0,0,249,251,1,0,0,0,250,242,1,0,0,0,250,243,1,0,0,0,250,244,1,
		0,0,0,250,245,1,0,0,0,250,246,1,0,0,0,251,43,1,0,0,0,252,254,5,1,0,0,253,
		255,3,2,1,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,
		0,0,0,257,258,1,0,0,0,258,259,5,2,0,0,259,262,1,0,0,0,260,262,3,2,1,0,
		261,252,1,0,0,0,261,260,1,0,0,0,262,45,1,0,0,0,263,264,7,6,0,0,264,47,
		1,0,0,0,30,51,80,89,104,112,114,121,123,125,128,134,140,149,154,161,166,
		171,186,194,202,209,213,220,224,231,235,238,250,256,261
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
