//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NL=3, STRING_START=4, STRING_FRAGMENT=5, STRING_ESCAPE=6, 
		STRING_END=7, LPAR=8, RPAR=9, LBRACE=10, RBRACE=11, EXCLAMATION=12, PLUS=13, 
		MINUS=14, STAR=15, SLASH=16, LESS=17, GREATER=18, EQUAL=19, PERCENT=20, 
		EQEQUAL=21, NOTEQUAL=22, LESSEQUAL=23, GREATEREQUAL=24, PLUSEQUAL=25, 
		MINEQUAL=26, STAREQUAL=27, SLASHEQUAL=28, PERCENTEQUAL=29, AND=30, OR=31, 
		COLON=32, COMMA=33, CALL=34, IF=35, ELIF=36, ELSE=37, WHILE=38, JUMP=39, 
		TOUR=40, LABEL=41, SYNC=42, BOOL=43, TRUE=44, FALSE=45, NUMBER=46, ID=47, 
		TAG=48, VARIABLE=49, WS=50, LINE_COMMENT=51, BLOCK_COMMENT=52, ERROR_CHAR=53, 
		NEWLINE=54, EMBED_WS=55;
	public const int
		RULE_program = 0, RULE_label_block = 1, RULE_statement = 2, RULE_dialogue_stmt = 3, 
		RULE_menu_stmt = 4, RULE_menu_item = 5, RULE_jump_stmt = 6, RULE_tour_stmt = 7, 
		RULE_call_stmt = 8, RULE_set_stmt = 9, RULE_if_stmt = 10, RULE_fstring = 11, 
		RULE_string_fragment = 12, RULE_expression = 13, RULE_expr_logical_and = 14, 
		RULE_expr_equality = 15, RULE_expr_comparison = 16, RULE_expr_term = 17, 
		RULE_expr_factor = 18, RULE_expr_unary = 19, RULE_expr_primary = 20, RULE_embedded_expr = 21, 
		RULE_embedded_call = 22, RULE_embedded_variable = 23, RULE_block = 24;
	public static readonly string[] ruleNames = {
		"program", "label_block", "statement", "dialogue_stmt", "menu_stmt", "menu_item", 
		"jump_stmt", "tour_stmt", "call_stmt", "set_stmt", "if_stmt", "fstring", 
		"string_fragment", "expression", "expr_logical_and", "expr_equality", 
		"expr_comparison", "expr_term", "expr_factor", "expr_unary", "expr_primary", 
		"embedded_expr", "embedded_call", "embedded_variable", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"'!'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'='", "'%'", "'=='", 
		"'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", null, 
		null, "':'", "','", "'call'", "'if'", "'elif'", "'else'", "'while'", null, 
		null, null, null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NL", "STRING_START", "STRING_FRAGMENT", "STRING_ESCAPE", 
		"STRING_END", "LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", 
		"MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", 
		"NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", 
		"SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", 
		"ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", "SYNC", "BOOL", "TRUE", 
		"FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "EMBED_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext[] label_block() {
			return GetRuleContexts<Label_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_blockContext label_block(int i) {
			return GetRuleContext<Label_blockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LABEL) {
				{
				{
				State = 50;
				label_block();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_blockContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(DSParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public Label_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_blockContext label_block() {
		Label_blockContext _localctx = new Label_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_label_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(LABEL);
			State = 59;
			_localctx.label = Match(ID);
			State = 60;
			Match(COLON);
			State = 61;
			Match(NEWLINE);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INDENT) {
				{
				{
				State = 62;
				Match(INDENT);
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68;
				statement();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 709786295336976L) != 0) );
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEDENT) {
				{
				{
				State = 73;
				Match(DEDENT);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dialogue_stmtContext dialogue_stmt() {
			return GetRuleContext<Dialogue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_stmtContext menu_stmt() {
			return GetRuleContext<Menu_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_stmtContext jump_stmt() {
			return GetRuleContext<Jump_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tour_stmtContext tour_stmt() {
			return GetRuleContext<Tour_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_stmtContext set_stmt() {
			return GetRuleContext<Set_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				dialogue_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				menu_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81;
				jump_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 82;
				tour_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 83;
				call_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84;
				set_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 85;
				if_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dialogue_stmtContext : ParserRuleContext {
		public IToken speaker;
		public FstringContext text;
		public IToken _TAG;
		public IList<IToken> _tags = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(DSParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(DSParser.TAG, i);
		}
		public Dialogue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dialogue_stmtContext dialogue_stmt() {
		Dialogue_stmtContext _localctx = new Dialogue_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_dialogue_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 88;
				Match(SYNC);
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 91;
				_localctx.speaker = Match(ID);
				}
			}

			State = 94;
			_localctx.text = fstring();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 95;
				_localctx._TAG = Match(TAG);
				_localctx._tags.Add(_localctx._TAG);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_stmtContext : ParserRuleContext {
		public Menu_itemContext _menu_item;
		public IList<Menu_itemContext> _options = new List<Menu_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public Menu_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_stmtContext menu_stmt() {
		Menu_stmtContext _localctx = new Menu_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_menu_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 103;
					_localctx._menu_item = menu_item();
					_localctx._options.Add(_localctx._menu_item);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		public FstringContext text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DSParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_localctx.text = fstring();
			State = 109;
			Match(COLON);
			State = 110;
			Match(NEWLINE);
			State = 111;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DSParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Jump_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_stmtContext jump_stmt() {
		Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_jump_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(JUMP);
			State = 114;
			_localctx.label = Match(ID);
			State = 115;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tour_stmtContext : ParserRuleContext {
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUR() { return GetToken(DSParser.TOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		public Tour_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tour_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTour_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tour_stmtContext tour_stmt() {
		Tour_stmtContext _localctx = new Tour_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_tour_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(TOUR);
			State = 118;
			_localctx.label = Match(ID);
			State = 119;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		public IToken func_name;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DSParser.COMMA, i);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 121;
				Match(SYNC);
				}
			}

			State = 124;
			Match(CALL);
			State = 125;
			_localctx.func_name = Match(ID);
			State = 126;
			Match(LPAR);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 642114790651152L) != 0)) {
				{
				State = 127;
				_localctx._expression = expression();
				_localctx._args.Add(_localctx._expression);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 128;
					Match(COMMA);
					State = 129;
					_localctx._expression = expression();
					_localctx._args.Add(_localctx._expression);
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 137;
			Match(RPAR);
			State = 138;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_stmtContext : ParserRuleContext {
		public IToken eq;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(DSParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DSParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(DSParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(DSParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(DSParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(DSParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(DSParser.PERCENTEQUAL, 0); }
		public Set_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_stmtContext set_stmt() {
		Set_stmtContext _localctx = new Set_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_set_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(VARIABLE);
			State = 141;
			_localctx.eq = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1040711680L) != 0)) ) {
				_localctx.eq = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 142;
			_localctx.value = expression();
			State = 143;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _conditions = new List<ExpressionContext>();
		public BlockContext _block;
		public IList<BlockContext> _blocks = new List<BlockContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DSParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(DSParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(DSParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DSParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DSParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(DSParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(DSParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DSParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(IF);
			State = 146;
			_localctx._expression = expression();
			_localctx._conditions.Add(_localctx._expression);
			State = 147;
			Match(COLON);
			State = 148;
			Match(NEWLINE);
			State = 149;
			_localctx._block = block();
			_localctx._blocks.Add(_localctx._block);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 150;
				Match(ELIF);
				State = 151;
				_localctx._expression = expression();
				_localctx._conditions.Add(_localctx._expression);
				State = 152;
				Match(COLON);
				State = 153;
				Match(NEWLINE);
				State = 154;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 161;
				Match(ELSE);
				State = 162;
				Match(COLON);
				State = 163;
				Match(NEWLINE);
				State = 164;
				_localctx._block = block();
				_localctx._blocks.Add(_localctx._block);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FstringContext : ParserRuleContext {
		public String_fragmentContext _string_fragment;
		public IList<String_fragmentContext> _frag = new List<String_fragmentContext>();
		public Embedded_exprContext _embedded_expr;
		public IList<Embedded_exprContext> _embed = new List<Embedded_exprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_START() { return GetToken(DSParser.STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(DSParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_fragmentContext[] string_fragment() {
			return GetRuleContexts<String_fragmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_fragmentContext string_fragment(int i) {
			return GetRuleContext<String_fragmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_exprContext[] embedded_expr() {
			return GetRuleContexts<Embedded_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_exprContext embedded_expr(int i) {
			return GetRuleContext<Embedded_exprContext>(i);
		}
		public FstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FstringContext fstring() {
		FstringContext _localctx = new FstringContext(Context, State);
		EnterRule(_localctx, 22, RULE_fstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(STRING_START);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1120L) != 0)) {
				{
				State = 170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_FRAGMENT:
				case STRING_ESCAPE:
					{
					State = 168;
					_localctx._string_fragment = string_fragment();
					_localctx._frag.Add(_localctx._string_fragment);
					}
					break;
				case LBRACE:
					{
					State = 169;
					_localctx._embedded_expr = embedded_expr();
					_localctx._embed.Add(_localctx._embedded_expr);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_fragmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_FRAGMENT() { return GetToken(DSParser.STRING_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ESCAPE() { return GetToken(DSParser.STRING_ESCAPE, 0); }
		public String_fragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_fragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_fragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_fragmentContext string_fragment() {
		String_fragmentContext _localctx = new String_fragmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_string_fragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_FRAGMENT || _la==STRING_ESCAPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext[] expr_logical_and() {
			return GetRuleContexts<Expr_logical_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_logical_andContext expr_logical_and(int i) {
			return GetRuleContext<Expr_logical_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(DSParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(DSParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			expr_logical_and();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 180;
				Match(OR);
				State = 181;
				expr_logical_and();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext[] expr_equality() {
			return GetRuleContexts<Expr_equalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_equalityContext expr_equality(int i) {
			return GetRuleContext<Expr_equalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(DSParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(DSParser.AND, i);
		}
		public Expr_logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_logical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_logical_andContext expr_logical_and() {
		Expr_logical_andContext _localctx = new Expr_logical_andContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr_logical_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			expr_equality();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 188;
				Match(AND);
				State = 189;
				expr_equality();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_equalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext[] expr_comparison() {
			return GetRuleContexts<Expr_comparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_comparisonContext expr_comparison(int i) {
			return GetRuleContext<Expr_comparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQUAL() { return GetTokens(DSParser.EQEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL(int i) {
			return GetToken(DSParser.EQEQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOTEQUAL() { return GetTokens(DSParser.NOTEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL(int i) {
			return GetToken(DSParser.NOTEQUAL, i);
		}
		public Expr_equalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_equality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_equalityContext expr_equality() {
		Expr_equalityContext _localctx = new Expr_equalityContext(Context, State);
		EnterRule(_localctx, 30, RULE_expr_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			expr_comparison();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQEQUAL || _la==NOTEQUAL) {
				{
				{
				State = 196;
				_la = TokenStream.LA(1);
				if ( !(_la==EQEQUAL || _la==NOTEQUAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 197;
				expr_comparison();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_comparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext[] expr_term() {
			return GetRuleContexts<Expr_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_termContext expr_term(int i) {
			return GetRuleContext<Expr_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(DSParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(DSParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(DSParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(DSParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATEREQUAL() { return GetTokens(DSParser.GREATEREQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL(int i) {
			return GetToken(DSParser.GREATEREQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESSEQUAL() { return GetTokens(DSParser.LESSEQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL(int i) {
			return GetToken(DSParser.LESSEQUAL, i);
		}
		public Expr_comparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_comparisonContext expr_comparison() {
		Expr_comparisonContext _localctx = new Expr_comparisonContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			expr_term();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25559040L) != 0)) {
				{
				{
				State = 204;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25559040L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 205;
				expr_term();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext[] expr_factor() {
			return GetRuleContexts<Expr_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_factorContext expr_factor(int i) {
			return GetRuleContext<Expr_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(DSParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(DSParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(DSParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(DSParser.MINUS, i);
		}
		public Expr_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_termContext expr_term() {
		Expr_termContext _localctx = new Expr_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			expr_factor();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 212;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 213;
				expr_factor();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext[] expr_unary() {
			return GetRuleContexts<Expr_unaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_unaryContext expr_unary(int i) {
			return GetRuleContext<Expr_unaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(DSParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(DSParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(DSParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(DSParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(DSParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(DSParser.PERCENT, i);
		}
		public Expr_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_factorContext expr_factor() {
		Expr_factorContext _localctx = new Expr_factorContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			expr_unary();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1146880L) != 0)) {
				{
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1146880L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 221;
				expr_unary();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_primaryContext expr_primary() {
			return GetRuleContext<Expr_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(DSParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(DSParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(DSParser.EXCLAMATION, 0); }
		public Expr_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_unaryContext expr_unary() {
		Expr_unaryContext _localctx = new Expr_unaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				State = 227;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 230;
			expr_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DSParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DSParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring() {
			return GetRuleContext<FstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_callContext embedded_call() {
			return GetRuleContext<Embedded_callContext>(0);
		}
		public Expr_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_primaryContext expr_primary() {
		Expr_primaryContext _localctx = new Expr_primaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_expr_primary);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				Match(NUMBER);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				Match(BOOL);
				}
				break;
			case STRING_START:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235;
				fstring();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236;
				Match(LPAR);
				State = 237;
				expression();
				State = 238;
				Match(RPAR);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240;
				embedded_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_callContext embedded_call() {
			return GetRuleContext<Embedded_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_variableContext embedded_variable() {
			return GetRuleContext<Embedded_variableContext>(0);
		}
		public Embedded_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_exprContext embedded_expr() {
		Embedded_exprContext _localctx = new Embedded_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_embedded_expr);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				embedded_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				embedded_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_callContext : ParserRuleContext {
		public IToken func_name;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DSParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(DSParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(DSParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(DSParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DSParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DSParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(DSParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DSParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DSParser.COMMA, i);
		}
		public Embedded_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_callContext embedded_call() {
		Embedded_callContext _localctx = new Embedded_callContext(Context, State);
		EnterRule(_localctx, 44, RULE_embedded_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(LBRACE);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNC) {
				{
				State = 248;
				Match(SYNC);
				}
			}

			State = 251;
			Match(CALL);
			State = 252;
			_localctx.func_name = Match(ID);
			State = 253;
			Match(LPAR);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 642114790651152L) != 0)) {
				{
				State = 254;
				_localctx._expression = expression();
				_localctx._args.Add(_localctx._expression);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 255;
					Match(COMMA);
					State = 256;
					_localctx._expression = expression();
					_localctx._args.Add(_localctx._expression);
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 264;
			Match(RPAR);
			State = 265;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DSParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DSParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DSParser.RBRACE, 0); }
		public Embedded_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_variableContext embedded_variable() {
		Embedded_variableContext _localctx = new Embedded_variableContext(Context, State);
		EnterRule(_localctx, 46, RULE_embedded_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(LBRACE);
			State = 268;
			Match(VARIABLE);
			State = 269;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(DSParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(DSParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(DSParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(DSParser.DEDENT, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDSParserVisitor<TResult> typedVisitor = visitor as IDSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 271;
				Match(INDENT);
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INDENT );
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				statement();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 709786295336976L) != 0) );
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 281;
					Match(DEDENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,55,287,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,5,1,64,8,1,10,1,12,1,67,9,1,1,1,4,1,70,8,1,11,1,12,
		1,71,1,1,5,1,75,8,1,10,1,12,1,78,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,87,
		8,2,1,3,3,3,90,8,3,1,3,3,3,93,8,3,1,3,1,3,5,3,97,8,3,10,3,12,3,100,9,3,
		1,3,1,3,1,4,4,4,105,8,4,11,4,12,4,106,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,8,3,8,123,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,131,8,
		8,10,8,12,8,134,9,8,3,8,136,8,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,157,8,10,10,10,12,
		10,160,9,10,1,10,1,10,1,10,1,10,3,10,166,8,10,1,11,1,11,1,11,5,11,171,
		8,11,10,11,12,11,174,9,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,5,13,183,
		8,13,10,13,12,13,186,9,13,1,14,1,14,1,14,5,14,191,8,14,10,14,12,14,194,
		9,14,1,15,1,15,1,15,5,15,199,8,15,10,15,12,15,202,9,15,1,16,1,16,1,16,
		5,16,207,8,16,10,16,12,16,210,9,16,1,17,1,17,1,17,5,17,215,8,17,10,17,
		12,17,218,9,17,1,18,1,18,1,18,5,18,223,8,18,10,18,12,18,226,9,18,1,19,
		3,19,229,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,
		20,242,8,20,1,21,1,21,3,21,246,8,21,1,22,1,22,3,22,250,8,22,1,22,1,22,
		1,22,1,22,1,22,1,22,5,22,258,8,22,10,22,12,22,261,9,22,3,22,263,8,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,4,24,273,8,24,11,24,12,24,274,1,
		24,4,24,278,8,24,11,24,12,24,279,1,24,4,24,283,8,24,11,24,12,24,284,1,
		24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,0,7,2,0,19,19,25,29,1,0,5,6,1,0,21,22,2,0,17,18,23,24,1,0,13,
		14,2,0,15,16,20,20,1,0,12,14,301,0,53,1,0,0,0,2,58,1,0,0,0,4,86,1,0,0,
		0,6,89,1,0,0,0,8,104,1,0,0,0,10,108,1,0,0,0,12,113,1,0,0,0,14,117,1,0,
		0,0,16,122,1,0,0,0,18,140,1,0,0,0,20,145,1,0,0,0,22,167,1,0,0,0,24,177,
		1,0,0,0,26,179,1,0,0,0,28,187,1,0,0,0,30,195,1,0,0,0,32,203,1,0,0,0,34,
		211,1,0,0,0,36,219,1,0,0,0,38,228,1,0,0,0,40,241,1,0,0,0,42,245,1,0,0,
		0,44,247,1,0,0,0,46,267,1,0,0,0,48,272,1,0,0,0,50,52,3,2,1,0,51,50,1,0,
		0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,
		0,0,56,57,5,0,0,1,57,1,1,0,0,0,58,59,5,41,0,0,59,60,5,47,0,0,60,61,5,32,
		0,0,61,65,5,54,0,0,62,64,5,1,0,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,
		0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,68,70,3,4,2,0,69,68,1,0,
		0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,76,1,0,0,0,73,75,5,2,
		0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,3,1,0,0,
		0,78,76,1,0,0,0,79,87,3,6,3,0,80,87,3,8,4,0,81,87,3,12,6,0,82,87,3,14,
		7,0,83,87,3,16,8,0,84,87,3,18,9,0,85,87,3,20,10,0,86,79,1,0,0,0,86,80,
		1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,86,83,1,0,0,0,86,84,1,0,0,0,86,85,
		1,0,0,0,87,5,1,0,0,0,88,90,5,42,0,0,89,88,1,0,0,0,89,90,1,0,0,0,90,92,
		1,0,0,0,91,93,5,47,0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,98,
		3,22,11,0,95,97,5,48,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,
		99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,54,0,0,102,7,1,0,0,
		0,103,105,3,10,5,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
		107,1,0,0,0,107,9,1,0,0,0,108,109,3,22,11,0,109,110,5,32,0,0,110,111,5,
		54,0,0,111,112,3,48,24,0,112,11,1,0,0,0,113,114,5,39,0,0,114,115,5,47,
		0,0,115,116,5,54,0,0,116,13,1,0,0,0,117,118,5,40,0,0,118,119,5,47,0,0,
		119,120,5,54,0,0,120,15,1,0,0,0,121,123,5,42,0,0,122,121,1,0,0,0,122,123,
		1,0,0,0,123,124,1,0,0,0,124,125,5,34,0,0,125,126,5,47,0,0,126,135,5,8,
		0,0,127,132,3,26,13,0,128,129,5,33,0,0,129,131,3,26,13,0,130,128,1,0,0,
		0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,136,1,0,0,0,134,
		132,1,0,0,0,135,127,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,5,
		9,0,0,138,139,5,54,0,0,139,17,1,0,0,0,140,141,5,49,0,0,141,142,7,0,0,0,
		142,143,3,26,13,0,143,144,5,54,0,0,144,19,1,0,0,0,145,146,5,35,0,0,146,
		147,3,26,13,0,147,148,5,32,0,0,148,149,5,54,0,0,149,158,3,48,24,0,150,
		151,5,36,0,0,151,152,3,26,13,0,152,153,5,32,0,0,153,154,5,54,0,0,154,155,
		3,48,24,0,155,157,1,0,0,0,156,150,1,0,0,0,157,160,1,0,0,0,158,156,1,0,
		0,0,158,159,1,0,0,0,159,165,1,0,0,0,160,158,1,0,0,0,161,162,5,37,0,0,162,
		163,5,32,0,0,163,164,5,54,0,0,164,166,3,48,24,0,165,161,1,0,0,0,165,166,
		1,0,0,0,166,21,1,0,0,0,167,172,5,4,0,0,168,171,3,24,12,0,169,171,3,42,
		21,0,170,168,1,0,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,
		173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,5,7,0,0,176,23,1,0,
		0,0,177,178,7,1,0,0,178,25,1,0,0,0,179,184,3,28,14,0,180,181,5,31,0,0,
		181,183,3,28,14,0,182,180,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
		185,1,0,0,0,185,27,1,0,0,0,186,184,1,0,0,0,187,192,3,30,15,0,188,189,5,
		30,0,0,189,191,3,30,15,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,
		0,192,193,1,0,0,0,193,29,1,0,0,0,194,192,1,0,0,0,195,200,3,32,16,0,196,
		197,7,2,0,0,197,199,3,32,16,0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,31,1,0,0,0,202,200,1,0,0,0,203,208,3,34,17,
		0,204,205,7,3,0,0,205,207,3,34,17,0,206,204,1,0,0,0,207,210,1,0,0,0,208,
		206,1,0,0,0,208,209,1,0,0,0,209,33,1,0,0,0,210,208,1,0,0,0,211,216,3,36,
		18,0,212,213,7,4,0,0,213,215,3,36,18,0,214,212,1,0,0,0,215,218,1,0,0,0,
		216,214,1,0,0,0,216,217,1,0,0,0,217,35,1,0,0,0,218,216,1,0,0,0,219,224,
		3,38,19,0,220,221,7,5,0,0,221,223,3,38,19,0,222,220,1,0,0,0,223,226,1,
		0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,37,1,0,0,0,226,224,1,0,0,0,227,
		229,7,6,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,3,
		40,20,0,231,39,1,0,0,0,232,242,5,49,0,0,233,242,5,46,0,0,234,242,5,43,
		0,0,235,242,3,22,11,0,236,237,5,8,0,0,237,238,3,26,13,0,238,239,5,9,0,
		0,239,242,1,0,0,0,240,242,3,44,22,0,241,232,1,0,0,0,241,233,1,0,0,0,241,
		234,1,0,0,0,241,235,1,0,0,0,241,236,1,0,0,0,241,240,1,0,0,0,242,41,1,0,
		0,0,243,246,3,44,22,0,244,246,3,46,23,0,245,243,1,0,0,0,245,244,1,0,0,
		0,246,43,1,0,0,0,247,249,5,10,0,0,248,250,5,42,0,0,249,248,1,0,0,0,249,
		250,1,0,0,0,250,251,1,0,0,0,251,252,5,34,0,0,252,253,5,47,0,0,253,262,
		5,8,0,0,254,259,3,26,13,0,255,256,5,33,0,0,256,258,3,26,13,0,257,255,1,
		0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,263,1,0,0,0,
		261,259,1,0,0,0,262,254,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,
		5,9,0,0,265,266,5,11,0,0,266,45,1,0,0,0,267,268,5,10,0,0,268,269,5,49,
		0,0,269,270,5,11,0,0,270,47,1,0,0,0,271,273,5,1,0,0,272,271,1,0,0,0,273,
		274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,278,3,
		4,2,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,
		280,282,1,0,0,0,281,283,5,2,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,
		1,0,0,0,284,285,1,0,0,0,285,49,1,0,0,0,31,53,65,71,76,86,89,92,98,106,
		122,132,135,158,165,170,172,184,192,200,208,216,224,228,241,245,249,259,
		262,274,279,284
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
