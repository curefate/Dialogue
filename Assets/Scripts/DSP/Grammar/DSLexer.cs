//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, ENDLINE=4, CALL=5, PLAY=6, HIDE=7, SHOW=8, 
		WAIT=9, IF=10, ELSE=11, WHILE=12, JUMP=13, LABEL=14, SYNC=15, MENU=16, 
		TRUE=17, FALSE=18, EQ=19, NEQ=20, GT=21, LT=22, GTE=23, LTE=24, PLUS=25, 
		MINUS=26, MUL=27, DIV=28, NOT=29, OR=30, AND=31, ASSIGN=32, DOT=33, COLON=34, 
		LPAREN=35, RPAREN=36, TAG=37, ID=38, VARIABLE=39, NUMBER=40, BOOL=41, 
		NEWLINE=42, WS=43, LINE_COMMENT=44, BLOCK_COMMENT=45, ERROR_CHAR=46, STRING_START=47;
	public const int
		STRING_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"CALL", "PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", "WHILE", "JUMP", 
		"LABEL", "SYNC", "MENU", "TRUE", "FALSE", "EQ", "NEQ", "GT", "LT", "GTE", 
		"LTE", "PLUS", "MINUS", "MUL", "DIV", "NOT", "OR", "AND", "ASSIGN", "DOT", 
		"COLON", "LPAREN", "RPAREN", "TAG", "ID", "VARIABLE", "NUMBER", "STRING_START", 
		"BOOL", "NEWLINE", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "ESCAPE_SEQ", 
		"ERROR_CHAR", "STRING_CONTENT", "STRING_ESCAPE", "STRING_END", "STRING_NEWLINE"
	};


	    private Stack<int> _indentStack = new Stack<int>();
	    private int _currentIndent = 0;

	    private void HandleNewline() {
	        // 添加结束行token
	        Emit(new CommonToken(ENDLINE, "ENDLINE"));
	        
	        // 计算新行的缩进空格数
	        int newIndent = 0;
	         while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') {
	             newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }

	        // 跳过空行
	        if (InputStream.LA(1) == '\n' || InputStream.LA(1) == '\r')
	            return;

	        // 处理缩进变化
	        newIndent /= 4;
	        if (newIndent > _currentIndent) {
	            Emit(new CommonToken(INDENT, "INDENT"));
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent) {
	            while (_currentIndent > newIndent) {
	                Emit(new CommonToken(DEDENT, "DEDENT"));
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	        // 缩进不变时不生成任何 Token
	    }

	    public override IToken NextToken() {
	        var token = base.NextToken();
	        if (token.Type == Eof) {
	            while (_currentIndent > 0) {
	                Emit(new CommonToken(DEDENT, "DEDENT"));
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'call'", "'play'", "'hide'", "'show'", 
		"'wait'", "'if'", "'else'", "'while'", "'jump'", "'label'", "'sync'", 
		"'menu'", "'true'", "'false'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'+'", "'-'", "'*'", "'/'", "'!'", "'||'", "'&&'", "'='", "'.'", "':'", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "ENDLINE", "CALL", "PLAY", "HIDE", 
		"SHOW", "WAIT", "IF", "ELSE", "WHILE", "JUMP", "LABEL", "SYNC", "MENU", 
		"TRUE", "FALSE", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "PLUS", "MINUS", 
		"MUL", "DIV", "NOT", "OR", "AND", "ASSIGN", "DOT", "COLON", "LPAREN", 
		"RPAREN", "TAG", "ID", "VARIABLE", "NUMBER", "BOOL", "NEWLINE", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 38 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,47,327,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
		1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
		1,30,1,31,1,31,1,32,1,32,4,32,214,8,32,11,32,12,32,215,1,33,1,33,5,33,
		220,8,33,10,33,12,33,223,9,33,1,34,1,34,1,34,1,34,5,34,229,8,34,10,34,
		12,34,232,9,34,1,35,3,35,235,8,35,1,35,4,35,238,8,35,11,35,12,35,239,1,
		35,1,35,4,35,244,8,35,11,35,12,35,245,3,35,248,8,35,1,36,1,36,1,36,1,36,
		1,36,1,37,1,37,3,37,257,8,37,1,38,3,38,260,8,38,1,38,1,38,1,38,1,39,4,
		39,266,8,39,11,39,12,39,267,1,39,1,39,1,40,1,40,5,40,274,8,40,10,40,12,
		40,277,9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,286,8,41,10,41,12,
		41,289,9,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,44,4,44,305,8,44,11,44,12,44,306,1,44,1,44,1,45,1,45,1,45,1,45,
		1,45,1,46,1,46,1,46,1,46,1,46,1,47,3,47,322,8,47,1,47,1,47,1,47,1,47,1,
		287,0,48,2,5,4,6,6,7,8,8,10,9,12,10,14,11,16,12,18,13,20,14,22,15,24,16,
		26,17,28,18,30,19,32,20,34,21,36,22,38,23,40,24,42,25,44,26,46,27,48,28,
		50,29,52,30,54,31,56,32,58,33,60,34,62,35,64,36,66,37,68,38,70,39,72,40,
		74,47,76,41,78,42,80,43,82,44,84,45,86,0,88,46,90,0,92,0,94,0,96,0,2,0,
		1,7,4,0,48,57,65,90,95,95,97,122,3,0,65,90,95,95,97,122,1,0,48,57,2,0,
		9,9,32,32,2,0,10,10,13,13,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
		114,114,116,116,4,0,10,10,13,13,34,34,92,92,338,0,2,1,0,0,0,0,4,1,0,0,
		0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,
		1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,
		0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,
		1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,
		0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,
		1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,
		0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,
		1,0,0,0,0,84,1,0,0,0,0,88,1,0,0,0,1,90,1,0,0,0,1,92,1,0,0,0,1,94,1,0,0,
		0,1,96,1,0,0,0,2,98,1,0,0,0,4,103,1,0,0,0,6,108,1,0,0,0,8,113,1,0,0,0,
		10,118,1,0,0,0,12,123,1,0,0,0,14,126,1,0,0,0,16,131,1,0,0,0,18,137,1,0,
		0,0,20,142,1,0,0,0,22,148,1,0,0,0,24,153,1,0,0,0,26,158,1,0,0,0,28,163,
		1,0,0,0,30,169,1,0,0,0,32,172,1,0,0,0,34,175,1,0,0,0,36,177,1,0,0,0,38,
		179,1,0,0,0,40,182,1,0,0,0,42,185,1,0,0,0,44,187,1,0,0,0,46,189,1,0,0,
		0,48,191,1,0,0,0,50,193,1,0,0,0,52,195,1,0,0,0,54,198,1,0,0,0,56,201,1,
		0,0,0,58,203,1,0,0,0,60,205,1,0,0,0,62,207,1,0,0,0,64,209,1,0,0,0,66,211,
		1,0,0,0,68,217,1,0,0,0,70,224,1,0,0,0,72,234,1,0,0,0,74,249,1,0,0,0,76,
		256,1,0,0,0,78,259,1,0,0,0,80,265,1,0,0,0,82,271,1,0,0,0,84,280,1,0,0,
		0,86,296,1,0,0,0,88,299,1,0,0,0,90,304,1,0,0,0,92,310,1,0,0,0,94,315,1,
		0,0,0,96,321,1,0,0,0,98,99,5,99,0,0,99,100,5,97,0,0,100,101,5,108,0,0,
		101,102,5,108,0,0,102,3,1,0,0,0,103,104,5,112,0,0,104,105,5,108,0,0,105,
		106,5,97,0,0,106,107,5,121,0,0,107,5,1,0,0,0,108,109,5,104,0,0,109,110,
		5,105,0,0,110,111,5,100,0,0,111,112,5,101,0,0,112,7,1,0,0,0,113,114,5,
		115,0,0,114,115,5,104,0,0,115,116,5,111,0,0,116,117,5,119,0,0,117,9,1,
		0,0,0,118,119,5,119,0,0,119,120,5,97,0,0,120,121,5,105,0,0,121,122,5,116,
		0,0,122,11,1,0,0,0,123,124,5,105,0,0,124,125,5,102,0,0,125,13,1,0,0,0,
		126,127,5,101,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,130,5,101,0,
		0,130,15,1,0,0,0,131,132,5,119,0,0,132,133,5,104,0,0,133,134,5,105,0,0,
		134,135,5,108,0,0,135,136,5,101,0,0,136,17,1,0,0,0,137,138,5,106,0,0,138,
		139,5,117,0,0,139,140,5,109,0,0,140,141,5,112,0,0,141,19,1,0,0,0,142,143,
		5,108,0,0,143,144,5,97,0,0,144,145,5,98,0,0,145,146,5,101,0,0,146,147,
		5,108,0,0,147,21,1,0,0,0,148,149,5,115,0,0,149,150,5,121,0,0,150,151,5,
		110,0,0,151,152,5,99,0,0,152,23,1,0,0,0,153,154,5,109,0,0,154,155,5,101,
		0,0,155,156,5,110,0,0,156,157,5,117,0,0,157,25,1,0,0,0,158,159,5,116,0,
		0,159,160,5,114,0,0,160,161,5,117,0,0,161,162,5,101,0,0,162,27,1,0,0,0,
		163,164,5,102,0,0,164,165,5,97,0,0,165,166,5,108,0,0,166,167,5,115,0,0,
		167,168,5,101,0,0,168,29,1,0,0,0,169,170,5,61,0,0,170,171,5,61,0,0,171,
		31,1,0,0,0,172,173,5,33,0,0,173,174,5,61,0,0,174,33,1,0,0,0,175,176,5,
		62,0,0,176,35,1,0,0,0,177,178,5,60,0,0,178,37,1,0,0,0,179,180,5,62,0,0,
		180,181,5,61,0,0,181,39,1,0,0,0,182,183,5,60,0,0,183,184,5,61,0,0,184,
		41,1,0,0,0,185,186,5,43,0,0,186,43,1,0,0,0,187,188,5,45,0,0,188,45,1,0,
		0,0,189,190,5,42,0,0,190,47,1,0,0,0,191,192,5,47,0,0,192,49,1,0,0,0,193,
		194,5,33,0,0,194,51,1,0,0,0,195,196,5,124,0,0,196,197,5,124,0,0,197,53,
		1,0,0,0,198,199,5,38,0,0,199,200,5,38,0,0,200,55,1,0,0,0,201,202,5,61,
		0,0,202,57,1,0,0,0,203,204,5,46,0,0,204,59,1,0,0,0,205,206,5,58,0,0,206,
		61,1,0,0,0,207,208,5,40,0,0,208,63,1,0,0,0,209,210,5,41,0,0,210,65,1,0,
		0,0,211,213,5,64,0,0,212,214,7,0,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,
		213,1,0,0,0,215,216,1,0,0,0,216,67,1,0,0,0,217,221,7,1,0,0,218,220,7,0,
		0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,
		69,1,0,0,0,223,221,1,0,0,0,224,225,5,36,0,0,225,230,3,68,33,0,226,227,
		5,46,0,0,227,229,3,68,33,0,228,226,1,0,0,0,229,232,1,0,0,0,230,228,1,0,
		0,0,230,231,1,0,0,0,231,71,1,0,0,0,232,230,1,0,0,0,233,235,5,45,0,0,234,
		233,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,238,7,2,0,0,237,236,1,
		0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,247,1,0,0,0,
		241,243,5,46,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,
		1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,241,1,0,0,0,247,248,1,0,0,
		0,248,73,1,0,0,0,249,250,5,34,0,0,250,251,1,0,0,0,251,252,6,36,0,0,252,
		253,6,36,1,0,253,75,1,0,0,0,254,257,3,26,12,0,255,257,3,28,13,0,256,254,
		1,0,0,0,256,255,1,0,0,0,257,77,1,0,0,0,258,260,5,13,0,0,259,258,1,0,0,
		0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,10,0,0,262,263,6,38,2,0,263,
		79,1,0,0,0,264,266,7,3,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,
		0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,6,39,3,0,270,81,1,0,0,0,271,
		275,5,35,0,0,272,274,8,4,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,
		0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,6,40,4,0,
		279,83,1,0,0,0,280,281,5,34,0,0,281,282,5,34,0,0,282,283,5,34,0,0,283,
		287,1,0,0,0,284,286,9,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,288,1,
		0,0,0,287,285,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,34,0,0,
		291,292,5,34,0,0,292,293,5,34,0,0,293,294,1,0,0,0,294,295,6,41,4,0,295,
		85,1,0,0,0,296,297,5,92,0,0,297,298,7,5,0,0,298,87,1,0,0,0,299,300,9,0,
		0,0,300,301,1,0,0,0,301,302,6,43,3,0,302,89,1,0,0,0,303,305,8,6,0,0,304,
		303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,
		0,0,0,308,309,6,44,1,0,309,91,1,0,0,0,310,311,5,92,0,0,311,312,7,5,0,0,
		312,313,1,0,0,0,313,314,6,45,1,0,314,93,1,0,0,0,315,316,5,34,0,0,316,317,
		1,0,0,0,317,318,6,46,5,0,318,319,6,46,6,0,319,95,1,0,0,0,320,322,5,13,
		0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,10,0,0,324,
		325,1,0,0,0,325,326,6,47,1,0,326,97,1,0,0,0,16,0,1,215,221,230,234,239,
		245,247,256,259,267,275,287,306,321,7,5,1,0,3,0,0,1,38,0,0,1,0,6,0,0,4,
		0,0,7,3,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
