//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, LBRACE=7, RBRACE=8, 
		EXCLAMATION=9, PLUS=10, MINUS=11, STAR=12, SLASH=13, LESS=14, GREATER=15, 
		EQUAL=16, PERCENT=17, EQEQUAL=18, NOTEQUAL=19, LESSEQUAL=20, GREATEREQUAL=21, 
		PLUSEQUAL=22, MINEQUAL=23, STAREQUAL=24, SLASHEQUAL=25, PERCENTEQUAL=26, 
		AND=27, OR=28, COLON=29, COMMA=30, CALL=31, IF=32, ELIF=33, ELSE=34, WHILE=35, 
		JUMP=36, TOUR=37, LABEL=38, SYNC=39, BOOL=40, TRUE=41, FALSE=42, NUMBER=43, 
		ID=44, TAG=45, VARIABLE=46, WS=47, LINE_COMMENT=48, BLOCK_COMMENT=49, 
		ERROR_CHAR=50, NEWLINE=51, STRING_START=52;
	public const int
		STRING_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", "MINUS", "STAR", 
		"SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", 
		"PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", "ELIF", "ELSE", 
		"WHILE", "JUMP", "TOUR", "LABEL", "SYNC", "BOOL", "TRUE", "FALSE", "NUMBER", 
		"ID", "TAG", "VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", 
		"DIGIT", "DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "STRING_CONTENT", "STRING_ESCAPE", "STRING_END", 
		"STRING_NEWLINE"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        // if (token.Channel == 0)
	            // UnityEngine.Debug.Log($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'{'", "'}'", "'!'", "'+'", 
		"'-'", "'*'", "'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", 
		"'>='", "'+='", "'-='", "'*='", "'/='", "'%='", null, null, "':'", "','", 
		"'call'", "'if'", "'elif'", "'else'", "'while'", null, null, null, null, 
		null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "LBRACE", "RBRACE", 
		"EXCLAMATION", "PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", 
		"PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", 
		"MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", 
		"COMMA", "CALL", "IF", "ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", 
		"SYNC", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 55 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,52,383,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
		1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,3,22,181,8,22,1,23,1,23,1,23,1,23,3,23,187,
		8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
		1,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,223,8,31,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,3,32,232,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,240,8,33,
		1,34,1,34,1,34,1,34,1,34,3,34,247,8,34,1,35,1,35,3,35,251,8,35,1,36,1,
		36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,3,38,265,8,38,1,38,
		1,38,3,38,269,8,38,1,39,1,39,5,39,273,8,39,10,39,12,39,276,9,39,1,40,1,
		40,4,40,280,8,40,11,40,12,40,281,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,
		42,1,43,1,43,1,43,4,43,295,8,43,11,43,12,43,296,3,43,299,8,43,1,44,1,44,
		1,44,5,44,304,8,44,10,44,12,44,307,9,44,1,45,1,45,1,46,1,46,1,47,1,47,
		1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,5,52,327,8,
		52,10,52,12,52,330,9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,339,8,
		53,10,53,12,53,342,9,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
		54,1,55,3,55,355,8,55,1,55,1,55,1,55,1,56,4,56,361,8,56,11,56,12,56,362,
		1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,3,59,
		378,8,59,1,59,1,59,1,59,1,59,1,340,0,60,2,5,4,6,6,7,8,8,10,9,12,10,14,
		11,16,12,18,13,20,14,22,15,24,16,26,17,28,18,30,19,32,20,34,21,36,22,38,
		23,40,24,42,25,44,26,46,27,48,28,50,29,52,30,54,31,56,32,58,33,60,34,62,
		35,64,36,66,37,68,38,70,39,72,40,74,41,76,42,78,43,80,44,82,45,84,46,86,
		52,88,0,90,0,92,0,94,0,96,0,98,0,100,0,102,0,104,47,106,48,108,49,110,
		50,112,51,114,0,116,0,118,0,120,0,2,0,1,8,1,0,49,57,1,0,48,57,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,9,12,12,32,32,2,0,10,10,
		13,13,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,
		110,110,114,114,116,116,392,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,
		0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,
		0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,
		1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,
		0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,
		1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,
		0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,
		1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,
		0,0,86,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,
		0,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,1,118,1,0,0,0,1,120,1,0,0,0,
		2,122,1,0,0,0,4,124,1,0,0,0,6,126,1,0,0,0,8,128,1,0,0,0,10,130,1,0,0,0,
		12,132,1,0,0,0,14,134,1,0,0,0,16,136,1,0,0,0,18,138,1,0,0,0,20,140,1,0,
		0,0,22,142,1,0,0,0,24,144,1,0,0,0,26,146,1,0,0,0,28,148,1,0,0,0,30,151,
		1,0,0,0,32,154,1,0,0,0,34,157,1,0,0,0,36,160,1,0,0,0,38,163,1,0,0,0,40,
		166,1,0,0,0,42,169,1,0,0,0,44,172,1,0,0,0,46,180,1,0,0,0,48,186,1,0,0,
		0,50,188,1,0,0,0,52,190,1,0,0,0,54,192,1,0,0,0,56,197,1,0,0,0,58,200,1,
		0,0,0,60,205,1,0,0,0,62,210,1,0,0,0,64,222,1,0,0,0,66,231,1,0,0,0,68,239,
		1,0,0,0,70,246,1,0,0,0,72,250,1,0,0,0,74,252,1,0,0,0,76,257,1,0,0,0,78,
		264,1,0,0,0,80,270,1,0,0,0,82,277,1,0,0,0,84,283,1,0,0,0,86,286,1,0,0,
		0,88,298,1,0,0,0,90,300,1,0,0,0,92,308,1,0,0,0,94,310,1,0,0,0,96,312,1,
		0,0,0,98,314,1,0,0,0,100,316,1,0,0,0,102,318,1,0,0,0,104,320,1,0,0,0,106,
		324,1,0,0,0,108,333,1,0,0,0,110,349,1,0,0,0,112,354,1,0,0,0,114,360,1,
		0,0,0,116,366,1,0,0,0,118,371,1,0,0,0,120,377,1,0,0,0,122,123,5,40,0,0,
		123,3,1,0,0,0,124,125,5,41,0,0,125,5,1,0,0,0,126,127,5,123,0,0,127,7,1,
		0,0,0,128,129,5,125,0,0,129,9,1,0,0,0,130,131,5,33,0,0,131,11,1,0,0,0,
		132,133,5,43,0,0,133,13,1,0,0,0,134,135,5,45,0,0,135,15,1,0,0,0,136,137,
		5,42,0,0,137,17,1,0,0,0,138,139,5,47,0,0,139,19,1,0,0,0,140,141,5,60,0,
		0,141,21,1,0,0,0,142,143,5,62,0,0,143,23,1,0,0,0,144,145,5,61,0,0,145,
		25,1,0,0,0,146,147,5,37,0,0,147,27,1,0,0,0,148,149,5,61,0,0,149,150,5,
		61,0,0,150,29,1,0,0,0,151,152,5,33,0,0,152,153,5,61,0,0,153,31,1,0,0,0,
		154,155,5,60,0,0,155,156,5,61,0,0,156,33,1,0,0,0,157,158,5,62,0,0,158,
		159,5,61,0,0,159,35,1,0,0,0,160,161,5,43,0,0,161,162,5,61,0,0,162,37,1,
		0,0,0,163,164,5,45,0,0,164,165,5,61,0,0,165,39,1,0,0,0,166,167,5,42,0,
		0,167,168,5,61,0,0,168,41,1,0,0,0,169,170,5,47,0,0,170,171,5,61,0,0,171,
		43,1,0,0,0,172,173,5,37,0,0,173,174,5,61,0,0,174,45,1,0,0,0,175,176,5,
		38,0,0,176,181,5,38,0,0,177,178,5,97,0,0,178,179,5,110,0,0,179,181,5,100,
		0,0,180,175,1,0,0,0,180,177,1,0,0,0,181,47,1,0,0,0,182,183,5,124,0,0,183,
		187,5,124,0,0,184,185,5,111,0,0,185,187,5,114,0,0,186,182,1,0,0,0,186,
		184,1,0,0,0,187,49,1,0,0,0,188,189,5,58,0,0,189,51,1,0,0,0,190,191,5,44,
		0,0,191,53,1,0,0,0,192,193,5,99,0,0,193,194,5,97,0,0,194,195,5,108,0,0,
		195,196,5,108,0,0,196,55,1,0,0,0,197,198,5,105,0,0,198,199,5,102,0,0,199,
		57,1,0,0,0,200,201,5,101,0,0,201,202,5,108,0,0,202,203,5,105,0,0,203,204,
		5,102,0,0,204,59,1,0,0,0,205,206,5,101,0,0,206,207,5,108,0,0,207,208,5,
		115,0,0,208,209,5,101,0,0,209,61,1,0,0,0,210,211,5,119,0,0,211,212,5,104,
		0,0,212,213,5,105,0,0,213,214,5,108,0,0,214,215,5,101,0,0,215,63,1,0,0,
		0,216,217,5,106,0,0,217,218,5,117,0,0,218,219,5,109,0,0,219,223,5,112,
		0,0,220,221,5,45,0,0,221,223,5,62,0,0,222,216,1,0,0,0,222,220,1,0,0,0,
		223,65,1,0,0,0,224,225,5,116,0,0,225,226,5,111,0,0,226,227,5,117,0,0,227,
		232,5,114,0,0,228,229,5,45,0,0,229,230,5,62,0,0,230,232,5,60,0,0,231,224,
		1,0,0,0,231,228,1,0,0,0,232,67,1,0,0,0,233,234,5,108,0,0,234,235,5,97,
		0,0,235,236,5,98,0,0,236,237,5,101,0,0,237,240,5,108,0,0,238,240,5,126,
		0,0,239,233,1,0,0,0,239,238,1,0,0,0,240,69,1,0,0,0,241,242,5,115,0,0,242,
		243,5,121,0,0,243,244,5,110,0,0,244,247,5,99,0,0,245,247,5,124,0,0,246,
		241,1,0,0,0,246,245,1,0,0,0,247,71,1,0,0,0,248,251,3,74,36,0,249,251,3,
		76,37,0,250,248,1,0,0,0,250,249,1,0,0,0,251,73,1,0,0,0,252,253,5,116,0,
		0,253,254,5,114,0,0,254,255,5,117,0,0,255,256,5,101,0,0,256,75,1,0,0,0,
		257,258,5,102,0,0,258,259,5,97,0,0,259,260,5,108,0,0,260,261,5,115,0,0,
		261,262,5,101,0,0,262,77,1,0,0,0,263,265,3,14,6,0,264,263,1,0,0,0,264,
		265,1,0,0,0,265,268,1,0,0,0,266,269,3,88,43,0,267,269,3,90,44,0,268,266,
		1,0,0,0,268,267,1,0,0,0,269,79,1,0,0,0,270,274,3,100,49,0,271,273,3,102,
		50,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,
		81,1,0,0,0,276,274,1,0,0,0,277,279,3,98,48,0,278,280,3,102,50,0,279,278,
		1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,83,1,0,0,0,
		283,284,5,36,0,0,284,285,3,80,39,0,285,85,1,0,0,0,286,287,5,34,0,0,287,
		288,1,0,0,0,288,289,6,42,0,0,289,290,6,42,1,0,290,87,1,0,0,0,291,299,3,
		94,46,0,292,294,3,92,45,0,293,295,3,94,46,0,294,293,1,0,0,0,295,296,1,
		0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,291,1,0,0,0,
		298,292,1,0,0,0,299,89,1,0,0,0,300,301,3,88,43,0,301,305,3,96,47,0,302,
		304,3,88,43,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,
		1,0,0,0,306,91,1,0,0,0,307,305,1,0,0,0,308,309,7,0,0,0,309,93,1,0,0,0,
		310,311,7,1,0,0,311,95,1,0,0,0,312,313,5,46,0,0,313,97,1,0,0,0,314,315,
		5,64,0,0,315,99,1,0,0,0,316,317,7,2,0,0,317,101,1,0,0,0,318,319,7,3,0,
		0,319,103,1,0,0,0,320,321,7,4,0,0,321,322,1,0,0,0,322,323,6,51,2,0,323,
		105,1,0,0,0,324,328,5,35,0,0,325,327,8,5,0,0,326,325,1,0,0,0,327,330,1,
		0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,
		331,332,6,52,2,0,332,107,1,0,0,0,333,334,5,34,0,0,334,335,5,34,0,0,335,
		336,5,34,0,0,336,340,1,0,0,0,337,339,9,0,0,0,338,337,1,0,0,0,339,342,1,
		0,0,0,340,341,1,0,0,0,340,338,1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,
		343,344,5,34,0,0,344,345,5,34,0,0,345,346,5,34,0,0,346,347,1,0,0,0,347,
		348,6,53,2,0,348,109,1,0,0,0,349,350,9,0,0,0,350,351,1,0,0,0,351,352,6,
		54,2,0,352,111,1,0,0,0,353,355,5,13,0,0,354,353,1,0,0,0,354,355,1,0,0,
		0,355,356,1,0,0,0,356,357,5,10,0,0,357,358,6,55,3,0,358,113,1,0,0,0,359,
		361,8,6,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,
		0,0,0,363,364,1,0,0,0,364,365,6,56,1,0,365,115,1,0,0,0,366,367,5,92,0,
		0,367,368,7,7,0,0,368,369,1,0,0,0,369,370,6,57,1,0,370,117,1,0,0,0,371,
		372,5,34,0,0,372,373,1,0,0,0,373,374,6,58,4,0,374,375,6,58,5,0,375,119,
		1,0,0,0,376,378,5,13,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,
		0,379,380,5,10,0,0,380,381,1,0,0,0,381,382,6,59,1,0,382,121,1,0,0,0,21,
		0,1,180,186,222,231,239,246,250,264,268,274,281,296,298,305,328,340,354,
		362,377,6,5,1,0,3,0,0,0,1,0,1,55,0,4,0,0,7,3,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
