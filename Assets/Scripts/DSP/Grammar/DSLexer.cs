//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, EXCLAMATION=7, PLUS=8, 
		MINUS=9, STAR=10, SLASH=11, LESS=12, GREATER=13, EQUAL=14, PERCENT=15, 
		EQEQUAL=16, NOTEQUAL=17, LESSEQUAL=18, GREATEREQUAL=19, PLUSEQUAL=20, 
		MINEQUAL=21, STAREQUAL=22, SLASHEQUAL=23, PERCENTEQUAL=24, AND=25, OR=26, 
		COLON=27, CALL=28, PLAY=29, HIDE=30, SHOW=31, WAIT=32, IF=33, ELSE=34, 
		WHILE=35, JUMP=36, LABEL=37, SYNC=38, MENU=39, BOOL=40, TRUE=41, FALSE=42, 
		NUMBER=43, ID=44, TAG=45, VARIABLE=46, WS=47, LINE_COMMENT=48, BLOCK_COMMENT=49, 
		ERROR_CHAR=50, NEWLINE=51, STRING_START=52;
	public const int
		STRING_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "EXCLAMATION", "PLUS", "MINUS", "STAR", "SLASH", "LESS", 
		"GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", 
		"OR", "COLON", "CALL", "PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", "WHILE", 
		"JUMP", "LABEL", "SYNC", "MENU", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", 
		"TAG", "VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", 
		"DIGIT", "DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "STRING_CONTENT", "STRING_ESCAPE", "STRING_END", 
		"STRING_NEWLINE"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        if (token.Channel == 0)
	            UnityEngine.Debug.Log($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'!'", "'+'", "'-'", "'*'", 
		"'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", "'>='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", null, null, "':'", "'call'", "'play'", 
		"'hide'", "'show'", "'wait'", "'if'", "'else'", "'while'", "'jump'", "'label'", 
		"'sync'", "'menu'", null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "EXCLAMATION", 
		"PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "CALL", 
		"PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", "WHILE", "JUMP", "LABEL", 
		"SYNC", "MENU", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 55 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,52,388,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
		1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,1,20,3,20,177,8,20,1,21,1,21,1,21,1,21,3,21,183,8,21,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
		29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
		31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,
		34,1,34,1,34,1,34,1,35,1,35,3,35,249,8,35,1,36,1,36,1,36,1,36,1,36,1,37,
		1,37,1,37,1,37,1,37,1,37,1,38,3,38,263,8,38,1,38,1,38,3,38,267,8,38,1,
		39,1,39,5,39,271,8,39,10,39,12,39,274,9,39,1,40,1,40,4,40,278,8,40,11,
		40,12,40,279,1,41,1,41,1,41,1,41,1,41,5,41,287,8,41,10,41,12,41,290,9,
		41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,4,43,300,8,43,11,43,12,43,301,
		3,43,304,8,43,1,44,1,44,1,44,5,44,309,8,44,10,44,12,44,312,9,44,1,45,1,
		45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,
		51,1,52,1,52,5,52,332,8,52,10,52,12,52,335,9,52,1,52,1,52,1,53,1,53,1,
		53,1,53,1,53,5,53,344,8,53,10,53,12,53,347,9,53,1,53,1,53,1,53,1,53,1,
		53,1,53,1,54,1,54,1,54,1,54,1,55,3,55,360,8,55,1,55,1,55,1,55,1,56,4,56,
		366,8,56,11,56,12,56,367,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,
		1,58,1,58,1,58,1,59,3,59,383,8,59,1,59,1,59,1,59,1,59,1,345,0,60,2,5,4,
		6,6,7,8,8,10,9,12,10,14,11,16,12,18,13,20,14,22,15,24,16,26,17,28,18,30,
		19,32,20,34,21,36,22,38,23,40,24,42,25,44,26,46,27,48,28,50,29,52,30,54,
		31,56,32,58,33,60,34,62,35,64,36,66,37,68,38,70,39,72,40,74,41,76,42,78,
		43,80,44,82,45,84,46,86,52,88,0,90,0,92,0,94,0,96,0,98,0,100,0,102,0,104,
		47,106,48,108,49,110,50,112,51,114,0,116,0,118,0,120,0,2,0,1,8,1,0,49,
		57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
		9,12,12,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,
		39,92,92,98,98,102,102,110,110,114,114,116,116,394,0,2,1,0,0,0,0,4,1,0,
		0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,
		1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,
		0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,
		1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,
		0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,
		1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,
		0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,
		1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,
		0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,1,118,1,
		0,0,0,1,120,1,0,0,0,2,122,1,0,0,0,4,124,1,0,0,0,6,126,1,0,0,0,8,128,1,
		0,0,0,10,130,1,0,0,0,12,132,1,0,0,0,14,134,1,0,0,0,16,136,1,0,0,0,18,138,
		1,0,0,0,20,140,1,0,0,0,22,142,1,0,0,0,24,144,1,0,0,0,26,147,1,0,0,0,28,
		150,1,0,0,0,30,153,1,0,0,0,32,156,1,0,0,0,34,159,1,0,0,0,36,162,1,0,0,
		0,38,165,1,0,0,0,40,168,1,0,0,0,42,176,1,0,0,0,44,182,1,0,0,0,46,184,1,
		0,0,0,48,186,1,0,0,0,50,191,1,0,0,0,52,196,1,0,0,0,54,201,1,0,0,0,56,206,
		1,0,0,0,58,211,1,0,0,0,60,214,1,0,0,0,62,219,1,0,0,0,64,225,1,0,0,0,66,
		230,1,0,0,0,68,236,1,0,0,0,70,241,1,0,0,0,72,248,1,0,0,0,74,250,1,0,0,
		0,76,255,1,0,0,0,78,262,1,0,0,0,80,268,1,0,0,0,82,275,1,0,0,0,84,281,1,
		0,0,0,86,291,1,0,0,0,88,303,1,0,0,0,90,305,1,0,0,0,92,313,1,0,0,0,94,315,
		1,0,0,0,96,317,1,0,0,0,98,319,1,0,0,0,100,321,1,0,0,0,102,323,1,0,0,0,
		104,325,1,0,0,0,106,329,1,0,0,0,108,338,1,0,0,0,110,354,1,0,0,0,112,359,
		1,0,0,0,114,365,1,0,0,0,116,371,1,0,0,0,118,376,1,0,0,0,120,382,1,0,0,
		0,122,123,5,40,0,0,123,3,1,0,0,0,124,125,5,41,0,0,125,5,1,0,0,0,126,127,
		5,33,0,0,127,7,1,0,0,0,128,129,5,43,0,0,129,9,1,0,0,0,130,131,5,45,0,0,
		131,11,1,0,0,0,132,133,5,42,0,0,133,13,1,0,0,0,134,135,5,47,0,0,135,15,
		1,0,0,0,136,137,5,60,0,0,137,17,1,0,0,0,138,139,5,62,0,0,139,19,1,0,0,
		0,140,141,5,61,0,0,141,21,1,0,0,0,142,143,5,37,0,0,143,23,1,0,0,0,144,
		145,5,61,0,0,145,146,5,61,0,0,146,25,1,0,0,0,147,148,5,33,0,0,148,149,
		5,61,0,0,149,27,1,0,0,0,150,151,5,60,0,0,151,152,5,61,0,0,152,29,1,0,0,
		0,153,154,5,62,0,0,154,155,5,61,0,0,155,31,1,0,0,0,156,157,5,43,0,0,157,
		158,5,61,0,0,158,33,1,0,0,0,159,160,5,45,0,0,160,161,5,61,0,0,161,35,1,
		0,0,0,162,163,5,42,0,0,163,164,5,61,0,0,164,37,1,0,0,0,165,166,5,47,0,
		0,166,167,5,61,0,0,167,39,1,0,0,0,168,169,5,37,0,0,169,170,5,61,0,0,170,
		41,1,0,0,0,171,172,5,38,0,0,172,177,5,38,0,0,173,174,5,97,0,0,174,175,
		5,110,0,0,175,177,5,100,0,0,176,171,1,0,0,0,176,173,1,0,0,0,177,43,1,0,
		0,0,178,179,5,124,0,0,179,183,5,124,0,0,180,181,5,111,0,0,181,183,5,114,
		0,0,182,178,1,0,0,0,182,180,1,0,0,0,183,45,1,0,0,0,184,185,5,58,0,0,185,
		47,1,0,0,0,186,187,5,99,0,0,187,188,5,97,0,0,188,189,5,108,0,0,189,190,
		5,108,0,0,190,49,1,0,0,0,191,192,5,112,0,0,192,193,5,108,0,0,193,194,5,
		97,0,0,194,195,5,121,0,0,195,51,1,0,0,0,196,197,5,104,0,0,197,198,5,105,
		0,0,198,199,5,100,0,0,199,200,5,101,0,0,200,53,1,0,0,0,201,202,5,115,0,
		0,202,203,5,104,0,0,203,204,5,111,0,0,204,205,5,119,0,0,205,55,1,0,0,0,
		206,207,5,119,0,0,207,208,5,97,0,0,208,209,5,105,0,0,209,210,5,116,0,0,
		210,57,1,0,0,0,211,212,5,105,0,0,212,213,5,102,0,0,213,59,1,0,0,0,214,
		215,5,101,0,0,215,216,5,108,0,0,216,217,5,115,0,0,217,218,5,101,0,0,218,
		61,1,0,0,0,219,220,5,119,0,0,220,221,5,104,0,0,221,222,5,105,0,0,222,223,
		5,108,0,0,223,224,5,101,0,0,224,63,1,0,0,0,225,226,5,106,0,0,226,227,5,
		117,0,0,227,228,5,109,0,0,228,229,5,112,0,0,229,65,1,0,0,0,230,231,5,108,
		0,0,231,232,5,97,0,0,232,233,5,98,0,0,233,234,5,101,0,0,234,235,5,108,
		0,0,235,67,1,0,0,0,236,237,5,115,0,0,237,238,5,121,0,0,238,239,5,110,0,
		0,239,240,5,99,0,0,240,69,1,0,0,0,241,242,5,109,0,0,242,243,5,101,0,0,
		243,244,5,110,0,0,244,245,5,117,0,0,245,71,1,0,0,0,246,249,3,74,36,0,247,
		249,3,76,37,0,248,246,1,0,0,0,248,247,1,0,0,0,249,73,1,0,0,0,250,251,5,
		116,0,0,251,252,5,114,0,0,252,253,5,117,0,0,253,254,5,101,0,0,254,75,1,
		0,0,0,255,256,5,102,0,0,256,257,5,97,0,0,257,258,5,108,0,0,258,259,5,115,
		0,0,259,260,5,101,0,0,260,77,1,0,0,0,261,263,3,10,4,0,262,261,1,0,0,0,
		262,263,1,0,0,0,263,266,1,0,0,0,264,267,3,88,43,0,265,267,3,90,44,0,266,
		264,1,0,0,0,266,265,1,0,0,0,267,79,1,0,0,0,268,272,3,100,49,0,269,271,
		3,102,50,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,
		0,0,273,81,1,0,0,0,274,272,1,0,0,0,275,277,3,98,48,0,276,278,3,102,50,
		0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
		83,1,0,0,0,281,282,5,36,0,0,282,288,3,80,39,0,283,284,3,96,47,0,284,285,
		3,80,39,0,285,287,1,0,0,0,286,283,1,0,0,0,287,290,1,0,0,0,288,286,1,0,
		0,0,288,289,1,0,0,0,289,85,1,0,0,0,290,288,1,0,0,0,291,292,5,34,0,0,292,
		293,1,0,0,0,293,294,6,42,0,0,294,295,6,42,1,0,295,87,1,0,0,0,296,304,3,
		94,46,0,297,299,3,92,45,0,298,300,3,94,46,0,299,298,1,0,0,0,300,301,1,
		0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,296,1,0,0,0,
		303,297,1,0,0,0,304,89,1,0,0,0,305,306,3,88,43,0,306,310,3,96,47,0,307,
		309,3,88,43,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,
		1,0,0,0,311,91,1,0,0,0,312,310,1,0,0,0,313,314,7,0,0,0,314,93,1,0,0,0,
		315,316,7,1,0,0,316,95,1,0,0,0,317,318,5,46,0,0,318,97,1,0,0,0,319,320,
		5,64,0,0,320,99,1,0,0,0,321,322,7,2,0,0,322,101,1,0,0,0,323,324,7,3,0,
		0,324,103,1,0,0,0,325,326,7,4,0,0,326,327,1,0,0,0,327,328,6,51,2,0,328,
		105,1,0,0,0,329,333,5,35,0,0,330,332,8,5,0,0,331,330,1,0,0,0,332,335,1,
		0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,
		336,337,6,52,2,0,337,107,1,0,0,0,338,339,5,34,0,0,339,340,5,34,0,0,340,
		341,5,34,0,0,341,345,1,0,0,0,342,344,9,0,0,0,343,342,1,0,0,0,344,347,1,
		0,0,0,345,346,1,0,0,0,345,343,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,
		348,349,5,34,0,0,349,350,5,34,0,0,350,351,5,34,0,0,351,352,1,0,0,0,352,
		353,6,53,2,0,353,109,1,0,0,0,354,355,9,0,0,0,355,356,1,0,0,0,356,357,6,
		54,2,0,357,111,1,0,0,0,358,360,5,13,0,0,359,358,1,0,0,0,359,360,1,0,0,
		0,360,361,1,0,0,0,361,362,5,10,0,0,362,363,6,55,3,0,363,113,1,0,0,0,364,
		366,8,6,0,0,365,364,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,1,
		0,0,0,368,369,1,0,0,0,369,370,6,56,1,0,370,115,1,0,0,0,371,372,5,92,0,
		0,372,373,7,7,0,0,373,374,1,0,0,0,374,375,6,57,1,0,375,117,1,0,0,0,376,
		377,5,34,0,0,377,378,1,0,0,0,378,379,6,58,4,0,379,380,6,58,5,0,380,119,
		1,0,0,0,381,383,5,13,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,
		0,384,385,5,10,0,0,385,386,1,0,0,0,386,387,6,59,1,0,387,121,1,0,0,0,18,
		0,1,176,182,248,262,266,272,279,288,301,303,310,333,345,359,367,382,6,
		5,1,0,3,0,0,0,1,0,1,55,0,4,0,0,7,3,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
