//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NL=3, STRING_START=4, STRING_FRAGMENT=5, STRING_ESCAPE=6, 
		STRING_END=7, LPAR=8, RPAR=9, LBRACE=10, RBRACE=11, EXCLAMATION=12, PLUS=13, 
		MINUS=14, STAR=15, SLASH=16, LESS=17, GREATER=18, EQUAL=19, PERCENT=20, 
		EQEQUAL=21, NOTEQUAL=22, LESSEQUAL=23, GREATEREQUAL=24, PLUSEQUAL=25, 
		MINEQUAL=26, STAREQUAL=27, SLASHEQUAL=28, PERCENTEQUAL=29, AND=30, OR=31, 
		COLON=32, COMMA=33, CALL=34, IF=35, ELIF=36, ELSE=37, WHILE=38, JUMP=39, 
		TOUR=40, LABEL=41, SYNC=42, BOOL=43, TRUE=44, FALSE=45, NUMBER=46, ID=47, 
		TAG=48, VARIABLE=49, WS=50, LINE_COMMENT=51, BLOCK_COMMENT=52, ERROR_CHAR=53, 
		NEWLINE=54, EMBED_WS=55;
	public const int
		STRING_MODE=1, EMBED_EXPR_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE", "EMBED_EXPR_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", "MINUS", "STAR", 
		"SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", 
		"PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", "ELIF", "ELSE", 
		"WHILE", "JUMP", "TOUR", "LABEL", "SYNC", "BOOL", "TRUE", "FALSE", "NUMBER", 
		"ID", "TAG", "VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", 
		"DIGIT", "DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "EMBED_START", "STRING_ESCAPE", "STRING_FRAGMENT", 
		"STRING_END", "STRING_NEWLINE", "EMBED_END", "EMBED_SYNC", "EMBED_CALL", 
		"EMBED_VAR", "EMBED_WS", "EMBED_LPAR", "EMBED_RPAR", "EMBED_COMMA", "EMBED_ID", 
		"EMBED_NUMBER", "EMBED_BOOL"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        // if (token.Channel == 0)
	            // UnityEngine.Debug.Log($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"'!'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'='", "'%'", "'=='", 
		"'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", null, 
		null, "':'", "','", "'call'", "'if'", "'elif'", "'else'", "'while'", null, 
		null, null, null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NL", "STRING_START", "STRING_FRAGMENT", "STRING_ESCAPE", 
		"STRING_END", "LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", 
		"MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", 
		"NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", 
		"SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", 
		"ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", "SYNC", "BOOL", "TRUE", 
		"FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "EMBED_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 55 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,55,457,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
		7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,
		7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,
		7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,
		7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
		7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,
		7,69,2,70,7,70,2,71,7,71,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
		18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,22,3,22,206,8,22,1,23,1,23,1,23,1,23,3,23,212,8,23,1,24,1,24,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
		1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
		1,31,1,31,1,31,1,31,3,31,248,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
		32,257,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,265,8,33,1,34,1,34,1,34,
		1,34,1,34,3,34,272,8,34,1,35,1,35,3,35,276,8,35,1,36,1,36,1,36,1,36,1,
		36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,3,38,290,8,38,1,38,1,38,3,38,294,
		8,38,1,39,1,39,5,39,298,8,39,10,39,12,39,301,9,39,1,40,1,40,4,40,305,8,
		40,11,40,12,40,306,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,4,
		43,319,8,43,11,43,12,43,320,3,43,323,8,43,1,44,1,44,1,44,5,44,328,8,44,
		10,44,12,44,331,9,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
		1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,5,52,351,8,52,10,52,12,52,354,
		9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,363,8,53,10,53,12,53,366,
		9,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,3,55,379,8,
		55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,
		57,3,57,395,8,57,1,58,4,58,398,8,58,11,58,12,58,399,1,59,1,59,1,59,1,59,
		1,60,3,60,407,8,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,
		62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,
		65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,
		69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,364,0,72,3,8,5,
		9,7,10,9,11,11,12,13,13,15,14,17,15,19,16,21,17,23,18,25,19,27,20,29,21,
		31,22,33,23,35,24,37,25,39,26,41,27,43,28,45,29,47,30,49,31,51,32,53,33,
		55,34,57,35,59,36,61,37,63,38,65,39,67,40,69,41,71,42,73,43,75,44,77,45,
		79,46,81,47,83,48,85,49,87,4,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,
		105,50,107,51,109,52,111,53,113,54,115,0,117,6,119,5,121,7,123,0,125,0,
		127,0,129,0,131,0,133,55,135,0,137,0,139,0,141,0,143,0,145,0,3,0,1,2,8,
		1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
		3,0,9,9,12,12,32,32,2,0,10,10,13,13,8,0,34,34,39,39,92,92,98,98,102,102,
		110,110,114,114,116,116,5,0,10,10,13,13,34,34,92,92,123,123,467,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,105,1,0,0,0,0,
		107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,1,
		117,1,0,0,0,1,119,1,0,0,0,1,121,1,0,0,0,1,123,1,0,0,0,2,125,1,0,0,0,2,
		127,1,0,0,0,2,129,1,0,0,0,2,131,1,0,0,0,2,133,1,0,0,0,2,135,1,0,0,0,2,
		137,1,0,0,0,2,139,1,0,0,0,2,141,1,0,0,0,2,143,1,0,0,0,2,145,1,0,0,0,3,
		147,1,0,0,0,5,149,1,0,0,0,7,151,1,0,0,0,9,153,1,0,0,0,11,155,1,0,0,0,13,
		157,1,0,0,0,15,159,1,0,0,0,17,161,1,0,0,0,19,163,1,0,0,0,21,165,1,0,0,
		0,23,167,1,0,0,0,25,169,1,0,0,0,27,171,1,0,0,0,29,173,1,0,0,0,31,176,1,
		0,0,0,33,179,1,0,0,0,35,182,1,0,0,0,37,185,1,0,0,0,39,188,1,0,0,0,41,191,
		1,0,0,0,43,194,1,0,0,0,45,197,1,0,0,0,47,205,1,0,0,0,49,211,1,0,0,0,51,
		213,1,0,0,0,53,215,1,0,0,0,55,217,1,0,0,0,57,222,1,0,0,0,59,225,1,0,0,
		0,61,230,1,0,0,0,63,235,1,0,0,0,65,247,1,0,0,0,67,256,1,0,0,0,69,264,1,
		0,0,0,71,271,1,0,0,0,73,275,1,0,0,0,75,277,1,0,0,0,77,282,1,0,0,0,79,289,
		1,0,0,0,81,295,1,0,0,0,83,302,1,0,0,0,85,308,1,0,0,0,87,311,1,0,0,0,89,
		322,1,0,0,0,91,324,1,0,0,0,93,332,1,0,0,0,95,334,1,0,0,0,97,336,1,0,0,
		0,99,338,1,0,0,0,101,340,1,0,0,0,103,342,1,0,0,0,105,344,1,0,0,0,107,348,
		1,0,0,0,109,357,1,0,0,0,111,373,1,0,0,0,113,378,1,0,0,0,115,383,1,0,0,
		0,117,394,1,0,0,0,119,397,1,0,0,0,121,401,1,0,0,0,123,406,1,0,0,0,125,
		412,1,0,0,0,127,417,1,0,0,0,129,421,1,0,0,0,131,425,1,0,0,0,133,429,1,
		0,0,0,135,433,1,0,0,0,137,437,1,0,0,0,139,441,1,0,0,0,141,445,1,0,0,0,
		143,449,1,0,0,0,145,453,1,0,0,0,147,148,5,40,0,0,148,4,1,0,0,0,149,150,
		5,41,0,0,150,6,1,0,0,0,151,152,5,123,0,0,152,8,1,0,0,0,153,154,5,125,0,
		0,154,10,1,0,0,0,155,156,5,33,0,0,156,12,1,0,0,0,157,158,5,43,0,0,158,
		14,1,0,0,0,159,160,5,45,0,0,160,16,1,0,0,0,161,162,5,42,0,0,162,18,1,0,
		0,0,163,164,5,47,0,0,164,20,1,0,0,0,165,166,5,60,0,0,166,22,1,0,0,0,167,
		168,5,62,0,0,168,24,1,0,0,0,169,170,5,61,0,0,170,26,1,0,0,0,171,172,5,
		37,0,0,172,28,1,0,0,0,173,174,5,61,0,0,174,175,5,61,0,0,175,30,1,0,0,0,
		176,177,5,33,0,0,177,178,5,61,0,0,178,32,1,0,0,0,179,180,5,60,0,0,180,
		181,5,61,0,0,181,34,1,0,0,0,182,183,5,62,0,0,183,184,5,61,0,0,184,36,1,
		0,0,0,185,186,5,43,0,0,186,187,5,61,0,0,187,38,1,0,0,0,188,189,5,45,0,
		0,189,190,5,61,0,0,190,40,1,0,0,0,191,192,5,42,0,0,192,193,5,61,0,0,193,
		42,1,0,0,0,194,195,5,47,0,0,195,196,5,61,0,0,196,44,1,0,0,0,197,198,5,
		37,0,0,198,199,5,61,0,0,199,46,1,0,0,0,200,201,5,38,0,0,201,206,5,38,0,
		0,202,203,5,97,0,0,203,204,5,110,0,0,204,206,5,100,0,0,205,200,1,0,0,0,
		205,202,1,0,0,0,206,48,1,0,0,0,207,208,5,124,0,0,208,212,5,124,0,0,209,
		210,5,111,0,0,210,212,5,114,0,0,211,207,1,0,0,0,211,209,1,0,0,0,212,50,
		1,0,0,0,213,214,5,58,0,0,214,52,1,0,0,0,215,216,5,44,0,0,216,54,1,0,0,
		0,217,218,5,99,0,0,218,219,5,97,0,0,219,220,5,108,0,0,220,221,5,108,0,
		0,221,56,1,0,0,0,222,223,5,105,0,0,223,224,5,102,0,0,224,58,1,0,0,0,225,
		226,5,101,0,0,226,227,5,108,0,0,227,228,5,105,0,0,228,229,5,102,0,0,229,
		60,1,0,0,0,230,231,5,101,0,0,231,232,5,108,0,0,232,233,5,115,0,0,233,234,
		5,101,0,0,234,62,1,0,0,0,235,236,5,119,0,0,236,237,5,104,0,0,237,238,5,
		105,0,0,238,239,5,108,0,0,239,240,5,101,0,0,240,64,1,0,0,0,241,242,5,106,
		0,0,242,243,5,117,0,0,243,244,5,109,0,0,244,248,5,112,0,0,245,246,5,45,
		0,0,246,248,5,62,0,0,247,241,1,0,0,0,247,245,1,0,0,0,248,66,1,0,0,0,249,
		250,5,116,0,0,250,251,5,111,0,0,251,252,5,117,0,0,252,257,5,114,0,0,253,
		254,5,45,0,0,254,255,5,62,0,0,255,257,5,60,0,0,256,249,1,0,0,0,256,253,
		1,0,0,0,257,68,1,0,0,0,258,259,5,108,0,0,259,260,5,97,0,0,260,261,5,98,
		0,0,261,262,5,101,0,0,262,265,5,108,0,0,263,265,5,126,0,0,264,258,1,0,
		0,0,264,263,1,0,0,0,265,70,1,0,0,0,266,267,5,115,0,0,267,268,5,121,0,0,
		268,269,5,110,0,0,269,272,5,99,0,0,270,272,5,124,0,0,271,266,1,0,0,0,271,
		270,1,0,0,0,272,72,1,0,0,0,273,276,3,75,36,0,274,276,3,77,37,0,275,273,
		1,0,0,0,275,274,1,0,0,0,276,74,1,0,0,0,277,278,5,116,0,0,278,279,5,114,
		0,0,279,280,5,117,0,0,280,281,5,101,0,0,281,76,1,0,0,0,282,283,5,102,0,
		0,283,284,5,97,0,0,284,285,5,108,0,0,285,286,5,115,0,0,286,287,5,101,0,
		0,287,78,1,0,0,0,288,290,3,15,6,0,289,288,1,0,0,0,289,290,1,0,0,0,290,
		293,1,0,0,0,291,294,3,89,43,0,292,294,3,91,44,0,293,291,1,0,0,0,293,292,
		1,0,0,0,294,80,1,0,0,0,295,299,3,101,49,0,296,298,3,103,50,0,297,296,1,
		0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,82,1,0,0,0,301,
		299,1,0,0,0,302,304,3,99,48,0,303,305,3,103,50,0,304,303,1,0,0,0,305,306,
		1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,84,1,0,0,0,308,309,5,36,0,
		0,309,310,3,81,39,0,310,86,1,0,0,0,311,312,5,34,0,0,312,313,1,0,0,0,313,
		314,6,42,0,0,314,88,1,0,0,0,315,323,3,95,46,0,316,318,3,93,45,0,317,319,
		3,95,46,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
		0,0,321,323,1,0,0,0,322,315,1,0,0,0,322,316,1,0,0,0,323,90,1,0,0,0,324,
		325,3,89,43,0,325,329,3,97,47,0,326,328,3,89,43,0,327,326,1,0,0,0,328,
		331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,92,1,0,0,0,331,329,1,0,
		0,0,332,333,7,0,0,0,333,94,1,0,0,0,334,335,7,1,0,0,335,96,1,0,0,0,336,
		337,5,46,0,0,337,98,1,0,0,0,338,339,5,64,0,0,339,100,1,0,0,0,340,341,7,
		2,0,0,341,102,1,0,0,0,342,343,7,3,0,0,343,104,1,0,0,0,344,345,7,4,0,0,
		345,346,1,0,0,0,346,347,6,51,1,0,347,106,1,0,0,0,348,352,5,35,0,0,349,
		351,8,5,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,
		0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,6,52,1,0,356,108,1,0,0,0,
		357,358,5,34,0,0,358,359,5,34,0,0,359,360,5,34,0,0,360,364,1,0,0,0,361,
		363,9,0,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,365,1,0,0,0,364,362,1,
		0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,368,5,34,0,0,368,369,5,34,0,
		0,369,370,5,34,0,0,370,371,1,0,0,0,371,372,6,53,1,0,372,110,1,0,0,0,373,
		374,9,0,0,0,374,375,1,0,0,0,375,376,6,54,1,0,376,112,1,0,0,0,377,379,5,
		13,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,5,10,0,
		0,381,382,6,55,2,0,382,114,1,0,0,0,383,384,3,7,2,0,384,385,1,0,0,0,385,
		386,6,56,3,0,386,387,6,56,4,0,387,116,1,0,0,0,388,389,5,92,0,0,389,395,
		7,6,0,0,390,391,5,123,0,0,391,395,5,123,0,0,392,393,5,125,0,0,393,395,
		5,125,0,0,394,388,1,0,0,0,394,390,1,0,0,0,394,392,1,0,0,0,395,118,1,0,
		0,0,396,398,8,7,0,0,397,396,1,0,0,0,398,399,1,0,0,0,399,397,1,0,0,0,399,
		400,1,0,0,0,400,120,1,0,0,0,401,402,5,34,0,0,402,403,1,0,0,0,403,404,6,
		59,5,0,404,122,1,0,0,0,405,407,5,13,0,0,406,405,1,0,0,0,406,407,1,0,0,
		0,407,408,1,0,0,0,408,409,5,10,0,0,409,410,1,0,0,0,410,411,6,60,6,0,411,
		124,1,0,0,0,412,413,3,9,3,0,413,414,1,0,0,0,414,415,6,61,5,0,415,416,6,
		61,7,0,416,126,1,0,0,0,417,418,3,71,34,0,418,419,1,0,0,0,419,420,6,62,
		8,0,420,128,1,0,0,0,421,422,3,55,26,0,422,423,1,0,0,0,423,424,6,63,9,0,
		424,130,1,0,0,0,425,426,3,85,41,0,426,427,1,0,0,0,427,428,6,64,10,0,428,
		132,1,0,0,0,429,430,3,105,51,0,430,431,1,0,0,0,431,432,6,65,1,0,432,134,
		1,0,0,0,433,434,3,3,0,0,434,435,1,0,0,0,435,436,6,66,11,0,436,136,1,0,
		0,0,437,438,3,5,1,0,438,439,1,0,0,0,439,440,6,67,12,0,440,138,1,0,0,0,
		441,442,3,53,25,0,442,443,1,0,0,0,443,444,6,68,13,0,444,140,1,0,0,0,445,
		446,3,81,39,0,446,447,1,0,0,0,447,448,6,69,14,0,448,142,1,0,0,0,449,450,
		3,79,38,0,450,451,1,0,0,0,451,452,6,70,15,0,452,144,1,0,0,0,453,454,3,
		73,35,0,454,455,1,0,0,0,455,456,6,71,16,0,456,146,1,0,0,0,23,0,1,2,205,
		211,247,256,264,271,275,289,293,299,306,320,322,329,352,364,378,394,399,
		406,17,5,1,0,0,1,0,1,55,0,5,2,0,7,10,0,4,0,0,3,0,0,7,11,0,7,42,0,7,34,
		0,7,49,0,7,8,0,7,9,0,7,33,0,7,47,0,7,46,0,7,43,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
