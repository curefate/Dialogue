//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, EXCLAMATION=7, PLUS=8, 
		MINUS=9, STAR=10, SLASH=11, LESS=12, GREATER=13, EQUAL=14, PERCENT=15, 
		EQEQUAL=16, NOTEQUAL=17, LESSEQUAL=18, GREATEREQUAL=19, PLUSEQUAL=20, 
		MINEQUAL=21, STAREQUAL=22, SLASHEQUAL=23, PERCENTEQUAL=24, AND=25, OR=26, 
		COLON=27, COMMA=28, CALL=29, IF=30, ELIF=31, ELSE=32, WHILE=33, JUMP=34, 
		TOUR=35, LABEL=36, SYNC=37, BOOL=38, TRUE=39, FALSE=40, NUMBER=41, ID=42, 
		TAG=43, VARIABLE=44, WS=45, LINE_COMMENT=46, BLOCK_COMMENT=47, ERROR_CHAR=48, 
		NEWLINE=49, STRING_START=50;
	public const int
		STRING_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "EXCLAMATION", "PLUS", "MINUS", "STAR", "SLASH", "LESS", 
		"GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", 
		"OR", "COLON", "COMMA", "CALL", "IF", "ELIF", "ELSE", "WHILE", "JUMP", 
		"TOUR", "LABEL", "SYNC", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", 
		"VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", "DIGIT", 
		"DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "STRING_CONTENT", "STRING_ESCAPE", "STRING_END", 
		"STRING_NEWLINE"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        // if (token.Channel == 0)
	            // UnityEngine.Debug.Log($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'!'", "'+'", "'-'", "'*'", 
		"'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", "'>='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", null, null, "':'", "','", "'call'", "'if'", 
		"'elif'", "'else'", "'while'", null, null, null, "'sync'", null, "'true'", 
		"'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "EXCLAMATION", 
		"PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", 
		"CALL", "IF", "ELIF", "ELSE", "WHILE", "JUMP", "TOUR", "LABEL", "SYNC", 
		"BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", 
		"BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 53 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,50,373,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
		1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
		1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,173,8,
		20,1,21,1,21,1,21,1,21,3,21,179,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
		215,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,224,8,30,1,31,1,31,1,
		31,1,31,1,31,1,31,3,31,232,8,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,3,33,
		241,8,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,3,
		36,255,8,36,1,36,1,36,3,36,259,8,36,1,37,1,37,5,37,263,8,37,10,37,12,37,
		266,9,37,1,38,1,38,4,38,270,8,38,11,38,12,38,271,1,39,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,1,41,1,41,1,41,4,41,285,8,41,11,41,12,41,286,3,41,289,
		8,41,1,42,1,42,1,42,5,42,294,8,42,10,42,12,42,297,9,42,1,43,1,43,1,44,
		1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,50,
		1,50,5,50,317,8,50,10,50,12,50,320,9,50,1,50,1,50,1,51,1,51,1,51,1,51,
		1,51,5,51,329,8,51,10,51,12,51,332,9,51,1,51,1,51,1,51,1,51,1,51,1,51,
		1,52,1,52,1,52,1,52,1,53,3,53,345,8,53,1,53,1,53,1,53,1,54,4,54,351,8,
		54,11,54,12,54,352,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,
		56,1,56,1,57,3,57,368,8,57,1,57,1,57,1,57,1,57,1,330,0,58,2,5,4,6,6,7,
		8,8,10,9,12,10,14,11,16,12,18,13,20,14,22,15,24,16,26,17,28,18,30,19,32,
		20,34,21,36,22,38,23,40,24,42,25,44,26,46,27,48,28,50,29,52,30,54,31,56,
		32,58,33,60,34,62,35,64,36,66,37,68,38,70,39,72,40,74,41,76,42,78,43,80,
		44,82,50,84,0,86,0,88,0,90,0,92,0,94,0,96,0,98,0,100,45,102,46,104,47,
		106,48,108,49,110,0,112,0,114,0,116,0,2,0,1,8,1,0,49,57,1,0,48,57,3,0,
		65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,9,12,12,32,32,2,
		0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,
		102,102,110,110,114,114,116,116,381,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,
		0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,
		1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,
		0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,
		1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,
		0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,
		1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,
		0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,100,
		1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,1,110,
		1,0,0,0,1,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,2,118,1,0,0,0,4,120,
		1,0,0,0,6,122,1,0,0,0,8,124,1,0,0,0,10,126,1,0,0,0,12,128,1,0,0,0,14,130,
		1,0,0,0,16,132,1,0,0,0,18,134,1,0,0,0,20,136,1,0,0,0,22,138,1,0,0,0,24,
		140,1,0,0,0,26,143,1,0,0,0,28,146,1,0,0,0,30,149,1,0,0,0,32,152,1,0,0,
		0,34,155,1,0,0,0,36,158,1,0,0,0,38,161,1,0,0,0,40,164,1,0,0,0,42,172,1,
		0,0,0,44,178,1,0,0,0,46,180,1,0,0,0,48,182,1,0,0,0,50,184,1,0,0,0,52,189,
		1,0,0,0,54,192,1,0,0,0,56,197,1,0,0,0,58,202,1,0,0,0,60,214,1,0,0,0,62,
		223,1,0,0,0,64,231,1,0,0,0,66,233,1,0,0,0,68,240,1,0,0,0,70,242,1,0,0,
		0,72,247,1,0,0,0,74,254,1,0,0,0,76,260,1,0,0,0,78,267,1,0,0,0,80,273,1,
		0,0,0,82,276,1,0,0,0,84,288,1,0,0,0,86,290,1,0,0,0,88,298,1,0,0,0,90,300,
		1,0,0,0,92,302,1,0,0,0,94,304,1,0,0,0,96,306,1,0,0,0,98,308,1,0,0,0,100,
		310,1,0,0,0,102,314,1,0,0,0,104,323,1,0,0,0,106,339,1,0,0,0,108,344,1,
		0,0,0,110,350,1,0,0,0,112,356,1,0,0,0,114,361,1,0,0,0,116,367,1,0,0,0,
		118,119,5,40,0,0,119,3,1,0,0,0,120,121,5,41,0,0,121,5,1,0,0,0,122,123,
		5,33,0,0,123,7,1,0,0,0,124,125,5,43,0,0,125,9,1,0,0,0,126,127,5,45,0,0,
		127,11,1,0,0,0,128,129,5,42,0,0,129,13,1,0,0,0,130,131,5,47,0,0,131,15,
		1,0,0,0,132,133,5,60,0,0,133,17,1,0,0,0,134,135,5,62,0,0,135,19,1,0,0,
		0,136,137,5,61,0,0,137,21,1,0,0,0,138,139,5,37,0,0,139,23,1,0,0,0,140,
		141,5,61,0,0,141,142,5,61,0,0,142,25,1,0,0,0,143,144,5,33,0,0,144,145,
		5,61,0,0,145,27,1,0,0,0,146,147,5,60,0,0,147,148,5,61,0,0,148,29,1,0,0,
		0,149,150,5,62,0,0,150,151,5,61,0,0,151,31,1,0,0,0,152,153,5,43,0,0,153,
		154,5,61,0,0,154,33,1,0,0,0,155,156,5,45,0,0,156,157,5,61,0,0,157,35,1,
		0,0,0,158,159,5,42,0,0,159,160,5,61,0,0,160,37,1,0,0,0,161,162,5,47,0,
		0,162,163,5,61,0,0,163,39,1,0,0,0,164,165,5,37,0,0,165,166,5,61,0,0,166,
		41,1,0,0,0,167,168,5,38,0,0,168,173,5,38,0,0,169,170,5,97,0,0,170,171,
		5,110,0,0,171,173,5,100,0,0,172,167,1,0,0,0,172,169,1,0,0,0,173,43,1,0,
		0,0,174,175,5,124,0,0,175,179,5,124,0,0,176,177,5,111,0,0,177,179,5,114,
		0,0,178,174,1,0,0,0,178,176,1,0,0,0,179,45,1,0,0,0,180,181,5,58,0,0,181,
		47,1,0,0,0,182,183,5,44,0,0,183,49,1,0,0,0,184,185,5,99,0,0,185,186,5,
		97,0,0,186,187,5,108,0,0,187,188,5,108,0,0,188,51,1,0,0,0,189,190,5,105,
		0,0,190,191,5,102,0,0,191,53,1,0,0,0,192,193,5,101,0,0,193,194,5,108,0,
		0,194,195,5,105,0,0,195,196,5,102,0,0,196,55,1,0,0,0,197,198,5,101,0,0,
		198,199,5,108,0,0,199,200,5,115,0,0,200,201,5,101,0,0,201,57,1,0,0,0,202,
		203,5,119,0,0,203,204,5,104,0,0,204,205,5,105,0,0,205,206,5,108,0,0,206,
		207,5,101,0,0,207,59,1,0,0,0,208,209,5,106,0,0,209,210,5,117,0,0,210,211,
		5,109,0,0,211,215,5,112,0,0,212,213,5,45,0,0,213,215,5,62,0,0,214,208,
		1,0,0,0,214,212,1,0,0,0,215,61,1,0,0,0,216,217,5,116,0,0,217,218,5,111,
		0,0,218,219,5,117,0,0,219,224,5,114,0,0,220,221,5,45,0,0,221,222,5,62,
		0,0,222,224,5,60,0,0,223,216,1,0,0,0,223,220,1,0,0,0,224,63,1,0,0,0,225,
		226,5,108,0,0,226,227,5,97,0,0,227,228,5,98,0,0,228,229,5,101,0,0,229,
		232,5,108,0,0,230,232,5,126,0,0,231,225,1,0,0,0,231,230,1,0,0,0,232,65,
		1,0,0,0,233,234,5,115,0,0,234,235,5,121,0,0,235,236,5,110,0,0,236,237,
		5,99,0,0,237,67,1,0,0,0,238,241,3,70,34,0,239,241,3,72,35,0,240,238,1,
		0,0,0,240,239,1,0,0,0,241,69,1,0,0,0,242,243,5,116,0,0,243,244,5,114,0,
		0,244,245,5,117,0,0,245,246,5,101,0,0,246,71,1,0,0,0,247,248,5,102,0,0,
		248,249,5,97,0,0,249,250,5,108,0,0,250,251,5,115,0,0,251,252,5,101,0,0,
		252,73,1,0,0,0,253,255,3,10,4,0,254,253,1,0,0,0,254,255,1,0,0,0,255,258,
		1,0,0,0,256,259,3,84,41,0,257,259,3,86,42,0,258,256,1,0,0,0,258,257,1,
		0,0,0,259,75,1,0,0,0,260,264,3,96,47,0,261,263,3,98,48,0,262,261,1,0,0,
		0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,77,1,0,0,0,266,264,
		1,0,0,0,267,269,3,94,46,0,268,270,3,98,48,0,269,268,1,0,0,0,270,271,1,
		0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,79,1,0,0,0,273,274,5,36,0,0,
		274,275,3,76,37,0,275,81,1,0,0,0,276,277,5,34,0,0,277,278,1,0,0,0,278,
		279,6,40,0,0,279,280,6,40,1,0,280,83,1,0,0,0,281,289,3,90,44,0,282,284,
		3,88,43,0,283,285,3,90,44,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,
		0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,281,1,0,0,0,288,282,1,0,0,0,
		289,85,1,0,0,0,290,291,3,84,41,0,291,295,3,92,45,0,292,294,3,84,41,0,293,
		292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,87,1,0,
		0,0,297,295,1,0,0,0,298,299,7,0,0,0,299,89,1,0,0,0,300,301,7,1,0,0,301,
		91,1,0,0,0,302,303,5,46,0,0,303,93,1,0,0,0,304,305,5,64,0,0,305,95,1,0,
		0,0,306,307,7,2,0,0,307,97,1,0,0,0,308,309,7,3,0,0,309,99,1,0,0,0,310,
		311,7,4,0,0,311,312,1,0,0,0,312,313,6,49,2,0,313,101,1,0,0,0,314,318,5,
		35,0,0,315,317,8,5,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,
		318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,6,50,2,0,322,103,
		1,0,0,0,323,324,5,34,0,0,324,325,5,34,0,0,325,326,5,34,0,0,326,330,1,0,
		0,0,327,329,9,0,0,0,328,327,1,0,0,0,329,332,1,0,0,0,330,331,1,0,0,0,330,
		328,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,5,34,0,0,334,335,5,
		34,0,0,335,336,5,34,0,0,336,337,1,0,0,0,337,338,6,51,2,0,338,105,1,0,0,
		0,339,340,9,0,0,0,340,341,1,0,0,0,341,342,6,52,2,0,342,107,1,0,0,0,343,
		345,5,13,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,347,5,
		10,0,0,347,348,6,53,3,0,348,109,1,0,0,0,349,351,8,6,0,0,350,349,1,0,0,
		0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,
		355,6,54,1,0,355,111,1,0,0,0,356,357,5,92,0,0,357,358,7,7,0,0,358,359,
		1,0,0,0,359,360,6,55,1,0,360,113,1,0,0,0,361,362,5,34,0,0,362,363,1,0,
		0,0,363,364,6,56,4,0,364,365,6,56,5,0,365,115,1,0,0,0,366,368,5,13,0,0,
		367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,10,0,0,370,371,
		1,0,0,0,371,372,6,57,1,0,372,117,1,0,0,0,20,0,1,172,178,214,223,231,240,
		254,258,264,271,286,288,295,318,330,344,352,367,6,5,1,0,3,0,0,0,1,0,1,
		53,0,4,0,0,7,3,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
