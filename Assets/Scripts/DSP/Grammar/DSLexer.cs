//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NL=4, LPAR=5, RPAR=6, COLON=7, UNARY_OPERATOR=8, 
		EXCLAMATION=9, MINUS=10, BINARY_OPERATOR=11, PLUS=12, SLASH=13, LESS=14, 
		GREATER=15, EQUAL=16, PERCENT=17, EQEQUAL=18, NOTEQUAL=19, LESSEQUAL=20, 
		GREATEREQUAL=21, PLUSEQUAL=22, MINEQUAL=23, STAREQUAL=24, SLASHEQUAL=25, 
		PERCENTEQUAL=26, CALL=27, PLAY=28, HIDE=29, SHOW=30, WAIT=31, IF=32, ELSE=33, 
		WHILE=34, JUMP=35, LABEL=36, SYNC=37, MENU=38, BOOL=39, TRUE=40, FALSE=41, 
		NUMBER=42, ID=43, TAG=44, VARIABLE=45, WS=46, LINE_COMMENT=47, BLOCK_COMMENT=48, 
		ERROR_CHAR=49, NEWLINE=50, STRING_START=51;
	public const int
		STRING_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "COLON", "UNARY_OPERATOR", "EXCLAMATION", "MINUS", "BINARY_OPERATOR", 
		"PLUS", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", 
		"PERCENTEQUAL", "CALL", "PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", 
		"WHILE", "JUMP", "LABEL", "SYNC", "MENU", "BOOL", "TRUE", "FALSE", "NUMBER", 
		"ID", "TAG", "VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", 
		"DIGIT", "DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "STRING_CONTENT", "STRING_ESCAPE", "STRING_END", 
		"STRING_NEWLINE"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        if (token.Channel == 0)
	            UnityEngine.Debug.Log($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "':'", null, "'!'", "'-'", 
		null, "'+'", "'/'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", 
		"'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'call'", "'play'", "'hide'", 
		"'show'", "'wait'", "'if'", "'else'", "'while'", "'jump'", "'label'", 
		"'sync'", "'menu'", null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NL", "LPAR", "RPAR", "COLON", "UNARY_OPERATOR", 
		"EXCLAMATION", "MINUS", "BINARY_OPERATOR", "PLUS", "SLASH", "LESS", "GREATER", 
		"EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "CALL", 
		"PLAY", "HIDE", "SHOW", "WAIT", "IF", "ELSE", "WHILE", "JUMP", "LABEL", 
		"SYNC", "MENU", "BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "NEWLINE", "STRING_START"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 54 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,51,393,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,3,3,129,
		8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,3,6,151,8,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
		1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
		1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,254,8,34,1,35,1,35,1,35,1,35,1,
		35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,3,37,268,8,37,1,37,1,37,3,37,272,
		8,37,1,38,1,38,5,38,276,8,38,10,38,12,38,279,9,38,1,39,1,39,4,39,283,8,
		39,11,39,12,39,284,1,40,1,40,1,40,1,40,1,40,5,40,292,8,40,10,40,12,40,
		295,9,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,4,42,305,8,42,11,42,12,
		42,306,3,42,309,8,42,1,43,1,43,1,43,5,43,314,8,43,10,43,12,43,317,9,43,
		1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
		1,50,1,50,1,51,1,51,5,51,337,8,51,10,51,12,51,340,9,51,1,51,1,51,1,52,
		1,52,1,52,1,52,1,52,5,52,349,8,52,10,52,12,52,352,9,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,3,54,365,8,54,1,54,1,54,1,54,1,
		55,4,55,371,8,55,11,55,12,55,372,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,
		57,1,57,1,57,1,57,1,57,1,58,3,58,388,8,58,1,58,1,58,1,58,1,58,1,350,0,
		59,2,5,4,6,6,7,8,8,10,9,12,10,14,11,16,12,18,13,20,14,22,15,24,16,26,17,
		28,18,30,19,32,20,34,21,36,22,38,23,40,24,42,25,44,26,46,27,48,28,50,29,
		52,30,54,31,56,32,58,33,60,34,62,35,64,36,66,37,68,38,70,39,72,40,74,41,
		76,42,78,43,80,44,82,45,84,51,86,0,88,0,90,0,92,0,94,0,96,0,98,0,100,0,
		102,46,104,47,106,48,108,49,110,50,112,0,114,0,116,0,118,0,2,0,1,8,1,0,
		49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,
		0,9,9,12,12,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,8,0,34,34,
		39,39,92,92,98,98,102,102,110,110,114,114,116,116,413,0,2,1,0,0,0,0,4,
		1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,
		0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,
		1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,
		0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,
		1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,
		0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,
		1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,
		0,0,82,1,0,0,0,0,84,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,
		0,108,1,0,0,0,0,110,1,0,0,0,1,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,
		1,118,1,0,0,0,2,120,1,0,0,0,4,122,1,0,0,0,6,124,1,0,0,0,8,128,1,0,0,0,
		10,130,1,0,0,0,12,132,1,0,0,0,14,150,1,0,0,0,16,152,1,0,0,0,18,154,1,0,
		0,0,20,156,1,0,0,0,22,158,1,0,0,0,24,160,1,0,0,0,26,162,1,0,0,0,28,164,
		1,0,0,0,30,167,1,0,0,0,32,170,1,0,0,0,34,173,1,0,0,0,36,176,1,0,0,0,38,
		179,1,0,0,0,40,182,1,0,0,0,42,185,1,0,0,0,44,188,1,0,0,0,46,191,1,0,0,
		0,48,196,1,0,0,0,50,201,1,0,0,0,52,206,1,0,0,0,54,211,1,0,0,0,56,216,1,
		0,0,0,58,219,1,0,0,0,60,224,1,0,0,0,62,230,1,0,0,0,64,235,1,0,0,0,66,241,
		1,0,0,0,68,246,1,0,0,0,70,253,1,0,0,0,72,255,1,0,0,0,74,260,1,0,0,0,76,
		267,1,0,0,0,78,273,1,0,0,0,80,280,1,0,0,0,82,286,1,0,0,0,84,296,1,0,0,
		0,86,308,1,0,0,0,88,310,1,0,0,0,90,318,1,0,0,0,92,320,1,0,0,0,94,322,1,
		0,0,0,96,324,1,0,0,0,98,326,1,0,0,0,100,328,1,0,0,0,102,330,1,0,0,0,104,
		334,1,0,0,0,106,343,1,0,0,0,108,359,1,0,0,0,110,364,1,0,0,0,112,370,1,
		0,0,0,114,376,1,0,0,0,116,381,1,0,0,0,118,387,1,0,0,0,120,121,5,40,0,0,
		121,3,1,0,0,0,122,123,5,41,0,0,123,5,1,0,0,0,124,125,5,58,0,0,125,7,1,
		0,0,0,126,129,3,10,4,0,127,129,3,12,5,0,128,126,1,0,0,0,128,127,1,0,0,
		0,129,9,1,0,0,0,130,131,5,33,0,0,131,11,1,0,0,0,132,133,5,45,0,0,133,13,
		1,0,0,0,134,151,3,16,7,0,135,151,3,12,5,0,136,151,3,18,8,0,137,151,3,20,
		9,0,138,151,3,22,10,0,139,151,3,24,11,0,140,151,3,26,12,0,141,151,3,28,
		13,0,142,151,3,30,14,0,143,151,3,32,15,0,144,151,3,34,16,0,145,151,3,36,
		17,0,146,151,3,38,18,0,147,151,3,40,19,0,148,151,3,42,20,0,149,151,3,44,
		21,0,150,134,1,0,0,0,150,135,1,0,0,0,150,136,1,0,0,0,150,137,1,0,0,0,150,
		138,1,0,0,0,150,139,1,0,0,0,150,140,1,0,0,0,150,141,1,0,0,0,150,142,1,
		0,0,0,150,143,1,0,0,0,150,144,1,0,0,0,150,145,1,0,0,0,150,146,1,0,0,0,
		150,147,1,0,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,15,1,0,0,0,152,153,
		5,43,0,0,153,17,1,0,0,0,154,155,5,47,0,0,155,19,1,0,0,0,156,157,5,60,0,
		0,157,21,1,0,0,0,158,159,5,62,0,0,159,23,1,0,0,0,160,161,5,61,0,0,161,
		25,1,0,0,0,162,163,5,37,0,0,163,27,1,0,0,0,164,165,5,61,0,0,165,166,5,
		61,0,0,166,29,1,0,0,0,167,168,5,33,0,0,168,169,5,61,0,0,169,31,1,0,0,0,
		170,171,5,60,0,0,171,172,5,61,0,0,172,33,1,0,0,0,173,174,5,62,0,0,174,
		175,5,61,0,0,175,35,1,0,0,0,176,177,5,43,0,0,177,178,5,61,0,0,178,37,1,
		0,0,0,179,180,5,45,0,0,180,181,5,61,0,0,181,39,1,0,0,0,182,183,5,42,0,
		0,183,184,5,61,0,0,184,41,1,0,0,0,185,186,5,47,0,0,186,187,5,61,0,0,187,
		43,1,0,0,0,188,189,5,37,0,0,189,190,5,61,0,0,190,45,1,0,0,0,191,192,5,
		99,0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,195,5,108,0,0,195,47,1,0,
		0,0,196,197,5,112,0,0,197,198,5,108,0,0,198,199,5,97,0,0,199,200,5,121,
		0,0,200,49,1,0,0,0,201,202,5,104,0,0,202,203,5,105,0,0,203,204,5,100,0,
		0,204,205,5,101,0,0,205,51,1,0,0,0,206,207,5,115,0,0,207,208,5,104,0,0,
		208,209,5,111,0,0,209,210,5,119,0,0,210,53,1,0,0,0,211,212,5,119,0,0,212,
		213,5,97,0,0,213,214,5,105,0,0,214,215,5,116,0,0,215,55,1,0,0,0,216,217,
		5,105,0,0,217,218,5,102,0,0,218,57,1,0,0,0,219,220,5,101,0,0,220,221,5,
		108,0,0,221,222,5,115,0,0,222,223,5,101,0,0,223,59,1,0,0,0,224,225,5,119,
		0,0,225,226,5,104,0,0,226,227,5,105,0,0,227,228,5,108,0,0,228,229,5,101,
		0,0,229,61,1,0,0,0,230,231,5,106,0,0,231,232,5,117,0,0,232,233,5,109,0,
		0,233,234,5,112,0,0,234,63,1,0,0,0,235,236,5,108,0,0,236,237,5,97,0,0,
		237,238,5,98,0,0,238,239,5,101,0,0,239,240,5,108,0,0,240,65,1,0,0,0,241,
		242,5,115,0,0,242,243,5,121,0,0,243,244,5,110,0,0,244,245,5,99,0,0,245,
		67,1,0,0,0,246,247,5,109,0,0,247,248,5,101,0,0,248,249,5,110,0,0,249,250,
		5,117,0,0,250,69,1,0,0,0,251,254,3,72,35,0,252,254,3,74,36,0,253,251,1,
		0,0,0,253,252,1,0,0,0,254,71,1,0,0,0,255,256,5,116,0,0,256,257,5,114,0,
		0,257,258,5,117,0,0,258,259,5,101,0,0,259,73,1,0,0,0,260,261,5,102,0,0,
		261,262,5,97,0,0,262,263,5,108,0,0,263,264,5,115,0,0,264,265,5,101,0,0,
		265,75,1,0,0,0,266,268,3,12,5,0,267,266,1,0,0,0,267,268,1,0,0,0,268,271,
		1,0,0,0,269,272,3,86,42,0,270,272,3,88,43,0,271,269,1,0,0,0,271,270,1,
		0,0,0,272,77,1,0,0,0,273,277,3,98,48,0,274,276,3,100,49,0,275,274,1,0,
		0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,79,1,0,0,0,279,
		277,1,0,0,0,280,282,3,96,47,0,281,283,3,100,49,0,282,281,1,0,0,0,283,284,
		1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,81,1,0,0,0,286,287,5,36,0,
		0,287,293,3,78,38,0,288,289,3,94,46,0,289,290,3,78,38,0,290,292,1,0,0,
		0,291,288,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,
		83,1,0,0,0,295,293,1,0,0,0,296,297,5,34,0,0,297,298,1,0,0,0,298,299,6,
		41,0,0,299,300,6,41,1,0,300,85,1,0,0,0,301,309,3,92,45,0,302,304,3,90,
		44,0,303,305,3,92,45,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,
		306,307,1,0,0,0,307,309,1,0,0,0,308,301,1,0,0,0,308,302,1,0,0,0,309,87,
		1,0,0,0,310,311,3,86,42,0,311,315,3,94,46,0,312,314,3,86,42,0,313,312,
		1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,89,1,0,0,0,
		317,315,1,0,0,0,318,319,7,0,0,0,319,91,1,0,0,0,320,321,7,1,0,0,321,93,
		1,0,0,0,322,323,5,46,0,0,323,95,1,0,0,0,324,325,5,64,0,0,325,97,1,0,0,
		0,326,327,7,2,0,0,327,99,1,0,0,0,328,329,7,3,0,0,329,101,1,0,0,0,330,331,
		7,4,0,0,331,332,1,0,0,0,332,333,6,50,2,0,333,103,1,0,0,0,334,338,5,35,
		0,0,335,337,8,5,0,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,
		339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,342,6,51,2,0,342,105,1,
		0,0,0,343,344,5,34,0,0,344,345,5,34,0,0,345,346,5,34,0,0,346,350,1,0,0,
		0,347,349,9,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,351,1,0,0,0,350,
		348,1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,34,0,0,354,355,5,
		34,0,0,355,356,5,34,0,0,356,357,1,0,0,0,357,358,6,52,2,0,358,107,1,0,0,
		0,359,360,9,0,0,0,360,361,1,0,0,0,361,362,6,53,2,0,362,109,1,0,0,0,363,
		365,5,13,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,5,
		10,0,0,367,368,6,54,3,0,368,111,1,0,0,0,369,371,8,6,0,0,370,369,1,0,0,
		0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,
		375,6,55,1,0,375,113,1,0,0,0,376,377,5,92,0,0,377,378,7,7,0,0,378,379,
		1,0,0,0,379,380,6,56,1,0,380,115,1,0,0,0,381,382,5,34,0,0,382,383,1,0,
		0,0,383,384,6,57,4,0,384,385,6,57,5,0,385,117,1,0,0,0,386,388,5,13,0,0,
		387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,390,5,10,0,0,390,391,
		1,0,0,0,391,392,6,58,1,0,392,119,1,0,0,0,18,0,1,128,150,253,267,271,277,
		284,293,306,308,315,338,350,364,372,387,6,5,1,0,3,0,0,0,1,0,1,54,0,4,0,
		0,7,3,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
